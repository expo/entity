import { IEntityClass } from './Entity';
import EntityCompanionProvider, { DatabaseAdapterFlavor } from './EntityCompanionProvider';
import EntityPrivacyPolicy from './EntityPrivacyPolicy';
import { EntityQueryContext, EntityTransactionalQueryContext, TransactionConfig } from './EntityQueryContext';
import ReadonlyEntity from './ReadonlyEntity';
import ViewerScopedEntityCompanion from './ViewerScopedEntityCompanion';
/**
 * A viewer context encapsulates all information necessary to evaluate an EntityPrivacyPolicy.
 *
 * In combination with an EntityCompanionProvider, a viewer context is the
 * entry point into the Entity framework.
 */
export default class ViewerContext {
    readonly entityCompanionProvider: EntityCompanionProvider;
    private readonly viewerScopedEntityCompanionProvider;
    constructor(entityCompanionProvider: EntityCompanionProvider);
    get [Symbol.toStringTag](): string;
    getViewerScopedEntityCompanionForClass<TMFields extends object, TMID extends NonNullable<TMFields[TMSelectedFields]>, TMViewerContext extends ViewerContext, TMEntity extends ReadonlyEntity<TMFields, TMID, TMViewerContext, TMSelectedFields>, TMPrivacyPolicy extends EntityPrivacyPolicy<TMFields, TMID, TMViewerContext, TMEntity, TMSelectedFields>, TMSelectedFields extends keyof TMFields>(entityClass: IEntityClass<TMFields, TMID, TMViewerContext, TMEntity, TMPrivacyPolicy, TMSelectedFields>): ViewerScopedEntityCompanion<TMFields, TMID, TMViewerContext, TMEntity, TMPrivacyPolicy, TMSelectedFields>;
    /**
     * Get the regular (non-transactional) query context for a database adaptor flavor.
     * @param databaseAdaptorFlavor - database adaptor flavor
     */
    getQueryContextForDatabaseAdaptorFlavor(databaseAdaptorFlavor: DatabaseAdapterFlavor): EntityQueryContext;
    /**
     * Run a transaction of specified database adaptor flavor and execute the provided
     * transaction-scoped closure within the transaction.
     * @param databaseAdaptorFlavor - databaseAdaptorFlavor
     * @param transactionScope - async callback to execute within the transaction
     */
    runInTransactionForDatabaseAdaptorFlavorAsync<TResult>(databaseAdaptorFlavor: DatabaseAdapterFlavor, transactionScope: (queryContext: EntityTransactionalQueryContext) => Promise<TResult>, transactionConfig?: TransactionConfig): Promise<TResult>;
}
