import EntityConfiguration from './EntityConfiguration';
import { EntityQueryContext } from './EntityQueryContext';
import { FieldTransformerMap } from './internal/EntityFieldTransformationUtils';
/**
 * Equality operand that is used for selecting entities with a field with a single value.
 */
export interface SingleValueFieldEqualityCondition<TFields, N extends keyof TFields = keyof TFields> {
    fieldName: N;
    fieldValue: TFields[N];
}
/**
 * Equality operand that is used for selecting entities with a field matching one of multiple values.
 */
export interface MultiValueFieldEqualityCondition<TFields, N extends keyof TFields = keyof TFields> {
    fieldName: N;
    fieldValues: readonly TFields[N][];
}
/**
 * A single equality operand for use in a selection clause.
 * See EntityLoader.loadManyByFieldEqualityConjunctionAsync documentation for examples.
 */
export type FieldEqualityCondition<TFields, N extends keyof TFields = keyof TFields> = SingleValueFieldEqualityCondition<TFields, N> | MultiValueFieldEqualityCondition<TFields, N>;
export declare function isSingleValueFieldEqualityCondition<TFields, N extends keyof TFields = keyof TFields>(condition: FieldEqualityCondition<TFields, N>): condition is SingleValueFieldEqualityCondition<TFields, N>;
export interface TableFieldSingleValueEqualityCondition {
    tableField: string;
    tableValue: any;
}
export interface TableFieldMultiValueEqualityCondition {
    tableField: string;
    tableValues: readonly any[];
}
export declare enum OrderByOrdering {
    ASCENDING = "asc",
    DESCENDING = "desc"
}
/**
 * SQL modifiers that only affect the selection but not the projection.
 */
export interface QuerySelectionModifiers<TFields> {
    /**
     * Order the entities by specified columns and orders.
     */
    orderBy?: {
        fieldName: keyof TFields;
        order: OrderByOrdering;
    }[];
    /**
     * Skip the specified number of entities queried before returning.
     */
    offset?: number;
    /**
     * Limit the number of entities returned.
     */
    limit?: number;
}
export interface QuerySelectionModifiersWithOrderByRaw<TFields> extends QuerySelectionModifiers<TFields> {
    /**
     * Order the entities by a raw SQL `ORDER BY` clause.
     */
    orderByRaw?: string;
}
export interface TableQuerySelectionModifiers {
    orderBy: {
        columnName: string;
        order: OrderByOrdering;
    }[] | undefined;
    offset: number | undefined;
    limit: number | undefined;
}
export interface TableQuerySelectionModifiersWithOrderByRaw extends TableQuerySelectionModifiers {
    orderByRaw: string | undefined;
}
/**
 * A database adapter is an interface by which entity objects can be
 * fetched, inserted, updated, and deleted from a database. This base class
 * handles all entity field transformation. Subclasses are responsible for
 * implementing database-specific logic for a type of database.
 */
export default abstract class EntityDatabaseAdapter<TFields extends Record<string, any>> {
    private readonly entityConfiguration;
    private readonly fieldTransformerMap;
    constructor(entityConfiguration: EntityConfiguration<TFields>);
    /**
     * Transformer definitions for field types. Used to modify values as they are read from or written to
     * the database. Override in concrete subclasses to change transformation behavior.
     * If a field type is not present in the map, then fields of that type will not be transformed.
     */
    protected abstract getFieldTransformerMap(): FieldTransformerMap;
    /**
     * Fetch many objects where fieldName is one of fieldValues.
     *
     * @param queryContext - query context with which to perform the fetch
     * @param fieldName - object field being queried
     * @param fieldValues - fieldName field values being queried
     * @returns map from fieldValue to objects that match the query for that fieldValue
     */
    fetchManyWhereAsync<K extends keyof TFields>(queryContext: EntityQueryContext, fieldName: K, fieldValues: readonly NonNullable<TFields[K]>[]): Promise<ReadonlyMap<NonNullable<TFields[K]>, readonly Readonly<TFields>[]>>;
    protected abstract fetchManyWhereInternalAsync(queryInterface: any, tableName: string, tableField: string, tableValues: readonly any[]): Promise<object[]>;
    /**
     * Fetch many objects matching the conjunction of where clauses constructed from
     * specified field equality operands.
     *
     * @param queryContext - query context with which to perform the fetch
     * @param fieldEqualityOperands - list of field equality where clause operand specifications
     * @param querySelectionModifiers - limit, offset, orderBy, and orderByRaw for the query
     * @returns array of objects matching the query
     */
    fetchManyByFieldEqualityConjunctionAsync<N extends keyof TFields>(queryContext: EntityQueryContext, fieldEqualityOperands: FieldEqualityCondition<TFields, N>[], querySelectionModifiers: QuerySelectionModifiers<TFields>): Promise<readonly Readonly<TFields>[]>;
    protected abstract fetchManyByFieldEqualityConjunctionInternalAsync(queryInterface: any, tableName: string, tableFieldSingleValueEqualityOperands: TableFieldSingleValueEqualityCondition[], tableFieldMultiValueEqualityOperands: TableFieldMultiValueEqualityCondition[], querySelectionModifiers: TableQuerySelectionModifiers): Promise<object[]>;
    /**
     * Fetch many objects matching the raw WHERE clause.
     *
     * @param queryContext - query context with which to perform the fetch
     * @param rawWhereClause - parameterized SQL WHERE clause with positional binding placeholders or named binding placeholders
     * @param bindings - array of positional bindings or object of named bindings
     * @param querySelectionModifiers - limit, offset, and orderBy for the query
     * @returns array of objects matching the query
     */
    fetchManyByRawWhereClauseAsync(queryContext: EntityQueryContext, rawWhereClause: string, bindings: any[] | object, querySelectionModifiers: QuerySelectionModifiersWithOrderByRaw<TFields>): Promise<readonly Readonly<TFields>[]>;
    protected abstract fetchManyByRawWhereClauseInternalAsync(queryInterface: any, tableName: string, rawWhereClause: string, bindings: any[] | object, querySelectionModifiers: TableQuerySelectionModifiersWithOrderByRaw): Promise<object[]>;
    /**
     * Insert an object.
     *
     * @param queryContext - query context with which to perform the insert
     * @param object - the object to insert
     * @returns the inserted object
     */
    insertAsync(queryContext: EntityQueryContext, object: Readonly<Partial<TFields>>): Promise<Readonly<TFields>>;
    protected abstract insertInternalAsync(queryInterface: any, tableName: string, object: object): Promise<object[]>;
    /**
     * Update an object.
     *
     * @param queryContext - query context with which to perform the update
     * @param idField - the field in the object that is the ID
     * @param id - the value of the ID field in the object
     * @param object - the object to update
     * @returns the updated object
     */
    updateAsync<K extends keyof TFields>(queryContext: EntityQueryContext, idField: K, id: any, object: Readonly<Partial<TFields>>): Promise<Readonly<TFields>>;
    protected abstract updateInternalAsync(queryInterface: any, tableName: string, tableIdField: string, id: any, object: object): Promise<object[]>;
    /**
     * Delete an object by ID.
     *
     * @param queryContext - query context with which to perform the deletion
     * @param idField - the field in the object that is the ID
     * @param id - the value of the ID field in the object
     */
    deleteAsync<K extends keyof TFields>(queryContext: EntityQueryContext, idField: K, id: any): Promise<void>;
    protected abstract deleteInternalAsync(queryInterface: any, tableName: string, tableIdField: string, id: any): Promise<number>;
    private convertToTableQueryModifiersWithOrderByRaw;
    private convertToTableQueryModifiers;
}
