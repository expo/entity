"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityFieldDefinition = exports.EntityEdgeDeletionAuthorizationInferenceBehavior = exports.EntityEdgeDeletionBehavior = void 0;
var EntityEdgeDeletionBehavior;
(function (EntityEdgeDeletionBehavior) {
    /**
     * Invalidate the cache for all entities that reference the entity
     * being deleted through this field, and transitively run deletions on those entities.
     * This is most useful when the database itself expresses foreign
     * keys and cascading deletes and the entity framework just needs to
     * be kept consistent with the state of the database.
     */
    EntityEdgeDeletionBehavior[EntityEdgeDeletionBehavior["CASCADE_DELETE_INVALIDATE_CACHE_ONLY"] = 0] = "CASCADE_DELETE_INVALIDATE_CACHE_ONLY";
    /**
     * Invalidate the cache for all entities that reference the entity
     * being deleted through this field. This is most useful when the database itself expresses
     * foreign keys and cascading "SET NULL"s and the entity framework just needs to be
     * kept consistent with the state of the database.
     */
    EntityEdgeDeletionBehavior[EntityEdgeDeletionBehavior["SET_NULL_INVALIDATE_CACHE_ONLY"] = 1] = "SET_NULL_INVALIDATE_CACHE_ONLY";
    /**
     * Delete all entities that reference the entity being deleted through this field. This is very similar
     * to SQL `ON DELETE CASCADE` but is done in the Entity framework instead of at the underlying level.
     * This will also invalidate the cached referencing entities.
     */
    EntityEdgeDeletionBehavior[EntityEdgeDeletionBehavior["CASCADE_DELETE"] = 2] = "CASCADE_DELETE";
    /**
     * Set this field to null when the referenced entity is deleted. This is very similar
     * to SQL `ON DELETE SET NULL` but is done in the Entity framework instead of at the underlying level.
     * This will also invalidate the cached referencing entities.
     */
    EntityEdgeDeletionBehavior[EntityEdgeDeletionBehavior["SET_NULL"] = 3] = "SET_NULL";
})(EntityEdgeDeletionBehavior || (exports.EntityEdgeDeletionBehavior = EntityEdgeDeletionBehavior = {}));
var EntityEdgeDeletionAuthorizationInferenceBehavior;
(function (EntityEdgeDeletionAuthorizationInferenceBehavior) {
    /**
     * Authorization to delete (when CASCADE_DELETE_INVALIDATE_CACHE_ONLY or CASCADE_DELETE) or update
     * (when SET_NULL_INVALIDATE_CACHE_ONLY or SET_NULL) all entities at the ends of edges of this type
     * cannot be inferred from authorization of any single entity at the end of an edge of this type.
     *
     * To evaluate canViewerDeleteAsync for the source entity, canViewerDeleteAsync must be called on all
     * entities at the ends of all edges of this type.
     */
    EntityEdgeDeletionAuthorizationInferenceBehavior[EntityEdgeDeletionAuthorizationInferenceBehavior["NONE"] = 0] = "NONE";
    /**
     * Authorization to delete (when CASCADE_DELETE_INVALIDATE_CACHE_ONLY or CASCADE_DELETE) or update
     * (when SET_NULL_INVALIDATE_CACHE_ONLY or SET_NULL) all entities at the ends of edges of this type
     * may be inferred from authorization of any single entity at the end of an edge of this type.
     *
     * To evaluate canViewerDeleteAsync for the source entity, canViewerDeleteAsync must only be called on
     * a single entity at the end of one edge of this type chosen at random.
     *
     * This should only be the case when the entity at the other end of this edge can be implicitly
     * deleted/updated by virtue of the source entity deletion being authorized and a single authorization check
     * on one edge of this type.
     *
     * Note that this is not used during actual deletions, only as an optimistic optimization during execution
     * of canViewerDeleteAsync. Each entity being deleted will still check deletion privacy during actual deletion.
     */
    EntityEdgeDeletionAuthorizationInferenceBehavior[EntityEdgeDeletionAuthorizationInferenceBehavior["ONE_IMPLIES_ALL"] = 1] = "ONE_IMPLIES_ALL";
})(EntityEdgeDeletionAuthorizationInferenceBehavior || (exports.EntityEdgeDeletionAuthorizationInferenceBehavior = EntityEdgeDeletionAuthorizationInferenceBehavior = {}));
/**
 * Definition for a field referencing a column in the underlying database. Specifies things like
 * cache behavior and associations, and handles input validation.
 */
class EntityFieldDefinition {
    columnName;
    cache;
    association;
    /**
     *
     * @param options - options for this field definition
     */
    constructor(options) {
        this.columnName = options.columnName;
        this.cache = options.cache ?? false;
        this.association = options.association;
    }
    /**
     * Validates input value for a field of this type. Null and undefined are considered valid by default. This is used for things like:
     * - EntityLoader.loadByFieldValue - to ensure the value being loaded by is a valid value
     * - EntityMutator.setField - to ensure the value being set is a valid value
     */
    validateInputValue(value) {
        if (value === null || value === undefined) {
            return true;
        }
        return this.validateInputValueInternal(value);
    }
}
exports.EntityFieldDefinition = EntityFieldDefinition;
//# sourceMappingURL=EntityFieldDefinition.js.map