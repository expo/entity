"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant_1 = __importDefault(require("invariant"));
const maps_1 = require("./utils/collections/maps");
/**
 * A standard IEntityCacheAdapter that coordinates caching through an IEntityGenericCacher.
 */
class GenericEntityCacheAdapter {
    genericCacher;
    constructor(genericCacher) {
        this.genericCacher = genericCacher;
    }
    async loadManyAsync(fieldName, fieldValues) {
        const redisCacheKeyToFieldValueMapping = new Map(fieldValues.map((fieldValue) => [
            this.genericCacher.makeCacheKey(fieldName, fieldValue),
            fieldValue,
        ]));
        const cacheResults = await this.genericCacher.loadManyAsync(Array.from(redisCacheKeyToFieldValueMapping.keys()));
        return (0, maps_1.mapKeys)(cacheResults, (redisCacheKey) => {
            const fieldValue = redisCacheKeyToFieldValueMapping.get(redisCacheKey);
            (0, invariant_1.default)(fieldValue !== undefined, 'Unspecified cache key %s returned from generic cacher', redisCacheKey);
            return fieldValue;
        });
    }
    async cacheManyAsync(fieldName, objectMap) {
        await this.genericCacher.cacheManyAsync((0, maps_1.mapKeys)(objectMap, (fieldValue) => this.genericCacher.makeCacheKey(fieldName, fieldValue)));
    }
    async cacheDBMissesAsync(fieldName, fieldValues) {
        await this.genericCacher.cacheDBMissesAsync(fieldValues.map((fieldValue) => this.genericCacher.makeCacheKey(fieldName, fieldValue)));
    }
    async invalidateManyAsync(fieldName, fieldValues) {
        await this.genericCacher.invalidateManyAsync(fieldValues.map((fieldValue) => this.genericCacher.makeCacheKey(fieldName, fieldValue)));
    }
}
exports.default = GenericEntityCacheAdapter;
//# sourceMappingURL=GenericEntityCacheAdapter.js.map