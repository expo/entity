import { EntityTransactionalQueryContext, EntityNonTransactionalQueryContext, EntityNestedTransactionalQueryContext, TransactionConfig } from './EntityQueryContext';
/**
 * A query context provider vends transactional and non-transactional query contexts.
 */
export default abstract class EntityQueryContextProvider {
    /**
     * Vend a regular (non-transactional) entity query context.
     */
    getQueryContext(): EntityNonTransactionalQueryContext;
    /**
     * Get the query interface for constructing a query context.
     */
    protected abstract getQueryInterface(): any;
    /**
     * Vend a transaction runner for use in runInTransactionAsync.
     */
    protected abstract createTransactionRunner<T>(transactionConfig?: TransactionConfig): (transactionScope: (queryInterface: any) => Promise<T>) => Promise<T>;
    protected abstract createNestedTransactionRunner<T>(outerQueryInterface: any): (transactionScope: (queryInterface: any) => Promise<T>) => Promise<T>;
    /**
     * Start a transaction and execute the provided transaction-scoped closure within the transaction.
     * @param transactionScope - async callback to execute within the transaction
     */
    runInTransactionAsync<T>(transactionScope: (queryContext: EntityTransactionalQueryContext) => Promise<T>, transactionConfig?: TransactionConfig): Promise<T>;
    /**
     * Start a nested transaction from the specified parent transaction and execure the
     * provided nested-transaction-scoped closure within the nested transaction.
     * @param outerQueryContext - the query context of the parent transaction
     * @param transactionScope - async callback to execute within the nested transaction
     */
    runInNestedTransactionAsync<T>(outerQueryContext: EntityTransactionalQueryContext, transactionScope: (innerQueryContext: EntityNestedTransactionalQueryContext) => Promise<T>): Promise<T>;
}
