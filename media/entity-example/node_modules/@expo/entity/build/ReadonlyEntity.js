"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant_1 = __importDefault(require("invariant"));
const EntityAssociationLoader_1 = __importDefault(require("./EntityAssociationLoader"));
/**
 * A readonly entity exposes only the read functionality of an Entity. Used as the base
 * type for most entity operations excluding mutations.
 *
 * This is also useful as a base class for Entities that should not be mutated, such as:
 * - Entities representing SQL views.
 * - Entities representing immutable tables.
 */
class ReadonlyEntity {
    viewerContext;
    id;
    databaseFields;
    selectedFields;
    /**
     * Constructs an instance of an Entity.
     *
     * @param constructorParam - data needed to construct an instance of an entity
     * viewerContext - the ViewerContext reading this entity
     * id - the ID of this entity
     * databaseFields - all underlying fields for this entity's data
     * selectedFields - selected fields for this entity from TSelectedFields type
     *
     * This should only be overridden in cases where additional data validation is needed.
     * The params should not be modified when calling super during constructions.
     *
     * @internal
     */
    constructor({ viewerContext, id, databaseFields, selectedFields, }) {
        (0, invariant_1.default)(id !== null && id !== undefined, 'id must be non-null');
        this.viewerContext = viewerContext;
        this.id = id;
        this.databaseFields = databaseFields;
        this.selectedFields = selectedFields;
    }
    toString() {
        return `${this.constructor.name}[${this.getID()}]`;
    }
    getUniqueIdentifier() {
        return this.toString();
    }
    /**
     * @returns the ViewerContext authorized to read this entity
     */
    getViewerContext() {
        return this.viewerContext;
    }
    /**
     * @returns the ID of this entity
     */
    getID() {
        return this.id;
    }
    /**
     * @returns EntityAssociationLoader for this entity
     */
    associationLoader() {
        return new EntityAssociationLoader_1.default(this);
    }
    /**
     * Get a underlying field from this entity's data
     * @param fieldName - the field to get
     * @returns the value of the field or undefined if not loaded with that field
     */
    getField(fieldName) {
        return this.selectedFields[fieldName];
    }
    /**
     * @returns all underlying fields from this entity's data
     */
    getAllFields() {
        return { ...this.selectedFields };
    }
    /**
     * @returns all underlying fields from this entity's database data
     */
    getAllDatabaseFields() {
        return { ...this.databaseFields };
    }
    /**
     * Vend loader for loading an entity in a given query context.
     * @param viewerContext - viewer context of loading user
     * @param queryContext - query context in which to perform the load
     */
    static loader(viewerContext, queryContext = viewerContext
        .getViewerScopedEntityCompanionForClass(this)
        .getQueryContextProvider()
        .getQueryContext()) {
        return viewerContext
            .getViewerScopedEntityCompanionForClass(this)
            .getLoaderFactory()
            .forLoad(queryContext, { previousValue: null, cascadingDeleteCause: null });
    }
}
exports.default = ReadonlyEntity;
//# sourceMappingURL=ReadonlyEntity.js.map