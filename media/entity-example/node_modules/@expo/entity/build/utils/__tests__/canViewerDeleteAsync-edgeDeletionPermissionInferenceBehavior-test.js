"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Entity_1 = __importDefault(require("../../Entity"));
const EntityConfiguration_1 = __importDefault(require("../../EntityConfiguration"));
const EntityFieldDefinition_1 = require("../../EntityFieldDefinition");
const EntityFields_1 = require("../../EntityFields");
const EntityPrivacyPolicy_1 = __importDefault(require("../../EntityPrivacyPolicy"));
const ViewerContext_1 = __importDefault(require("../../ViewerContext"));
const AlwaysAllowPrivacyPolicyRule_1 = __importDefault(require("../../rules/AlwaysAllowPrivacyPolicyRule"));
const AlwaysDenyPrivacyPolicyRule_1 = __importDefault(require("../../rules/AlwaysDenyPrivacyPolicyRule"));
const EntityPrivacyUtils_1 = require("../EntityPrivacyUtils");
const createUnitTestEntityCompanionProvider_1 = require("../testing/createUnitTestEntityCompanionProvider");
describe(EntityPrivacyUtils_1.canViewerDeleteAsync, () => {
    describe('edgeDeletionPermissionInferenceBehavior', () => {
        it('optimizes when EntityEdgeDeletionPermissionInferenceBehavior.ONE_IMPLIES_ALL', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            // create root
            const testEntity = await TestEntity.creator(viewerContext).enforceCreateAsync();
            // create a bunch of leaves referencing root with
            // edgeDeletionPermissionInferenceBehavior = EntityEdgeDeletionPermissionInferenceBehavior.ONE_IMPLIES_ALL
            for (let i = 0; i < 10; i++) {
                await TestLeafEntity.creator(viewerContext)
                    .setField('test_entity_id', testEntity.getID())
                    .enforceCreateAsync();
            }
            for (let i = 0; i < 10; i++) {
                await TestLeafLookupByFieldEntity.creator(viewerContext)
                    .setField('test_entity_id', testEntity.getID())
                    .enforceCreateAsync();
            }
            const testLeafEntityCompanion = viewerContext.getViewerScopedEntityCompanionForClass(TestLeafEntity);
            const testLeafEntityAuthorizeDeleteSpy = jest.spyOn(testLeafEntityCompanion.entityCompanion.privacyPolicy, 'authorizeDeleteAsync');
            const testLeafLookupByFieldEntityCompanion = viewerContext.getViewerScopedEntityCompanionForClass(TestLeafLookupByFieldEntity);
            const testLeafLookupByFieldEntityAuthorizeDeleteSpy = jest.spyOn(testLeafLookupByFieldEntityCompanion.entityCompanion.privacyPolicy, 'authorizeDeleteAsync');
            const canViewerDelete = await (0, EntityPrivacyUtils_1.canViewerDeleteAsync)(TestEntity, testEntity);
            expect(canViewerDelete).toBe(true);
            expect(testLeafEntityAuthorizeDeleteSpy).toHaveBeenCalledTimes(1);
            expect(testLeafLookupByFieldEntityAuthorizeDeleteSpy).toHaveBeenCalledTimes(1);
        });
        it('does not optimize when undefined', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            // create root
            const testEntity = await TestEntity.creator(viewerContext).enforceCreateAsync();
            // create a bunch of leaves with no edgeDeletionPermissionInferenceBehavior
            for (let i = 0; i < 10; i++) {
                await TestLeafNoInferenceEntity.creator(viewerContext)
                    .setField('test_entity_id', testEntity.getID())
                    .enforceCreateAsync();
            }
            const companion = viewerContext.getViewerScopedEntityCompanionForClass(TestLeafNoInferenceEntity);
            const authorizeDeleteSpy = jest.spyOn(companion.entityCompanion.privacyPolicy, 'authorizeDeleteAsync');
            const canViewerDelete = await (0, EntityPrivacyUtils_1.canViewerDeleteAsync)(TestEntity, testEntity);
            expect(canViewerDelete).toBe(true);
            expect(authorizeDeleteSpy).toHaveBeenCalledTimes(10);
        });
    });
});
class AlwaysAllowEntityPrivacyPolicy extends EntityPrivacyPolicy_1.default {
    readRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    createRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    updateRules = [
        new AlwaysDenyPrivacyPolicyRule_1.default(),
    ];
    deleteRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
}
class TestEntity extends Entity_1.default {
    static defineCompanionDefinition() {
        return {
            entityClass: TestEntity,
            entityConfiguration: new EntityConfiguration_1.default({
                idField: 'id',
                tableName: 'blah',
                inboundEdges: [TestLeafEntity, TestLeafLookupByFieldEntity, TestLeafNoInferenceEntity],
                schema: {
                    id: new EntityFields_1.UUIDField({
                        columnName: 'custom_id',
                    }),
                },
                databaseAdapterFlavor: 'postgres',
                cacheAdapterFlavor: 'redis',
            }),
            privacyPolicyClass: AlwaysAllowEntityPrivacyPolicy,
        };
    }
}
class TestLeafEntity extends Entity_1.default {
    static defineCompanionDefinition() {
        return {
            entityClass: TestLeafEntity,
            entityConfiguration: new EntityConfiguration_1.default({
                idField: 'id',
                tableName: 'blah_2',
                schema: {
                    id: new EntityFields_1.UUIDField({
                        columnName: 'custom_id',
                    }),
                    test_entity_id: new EntityFields_1.UUIDField({
                        columnName: 'test_entity_id',
                        association: {
                            associatedEntityClass: TestEntity,
                            edgeDeletionBehavior: EntityFieldDefinition_1.EntityEdgeDeletionBehavior.CASCADE_DELETE,
                            edgeDeletionAuthorizationInferenceBehavior: EntityFieldDefinition_1.EntityEdgeDeletionAuthorizationInferenceBehavior.ONE_IMPLIES_ALL,
                        },
                    }),
                },
                databaseAdapterFlavor: 'postgres',
                cacheAdapterFlavor: 'redis',
            }),
            privacyPolicyClass: AlwaysAllowEntityPrivacyPolicy,
        };
    }
}
class TestLeafLookupByFieldEntity extends Entity_1.default {
    static defineCompanionDefinition() {
        return {
            entityClass: TestLeafEntity,
            entityConfiguration: new EntityConfiguration_1.default({
                idField: 'id',
                tableName: 'blah_4',
                schema: {
                    id: new EntityFields_1.UUIDField({
                        columnName: 'custom_id',
                    }),
                    test_entity_id: new EntityFields_1.UUIDField({
                        columnName: 'test_entity_id',
                        association: {
                            associatedEntityClass: TestEntity,
                            edgeDeletionBehavior: EntityFieldDefinition_1.EntityEdgeDeletionBehavior.CASCADE_DELETE,
                            associatedEntityLookupByField: 'id',
                            edgeDeletionAuthorizationInferenceBehavior: EntityFieldDefinition_1.EntityEdgeDeletionAuthorizationInferenceBehavior.ONE_IMPLIES_ALL,
                        },
                    }),
                },
                databaseAdapterFlavor: 'postgres',
                cacheAdapterFlavor: 'redis',
            }),
            privacyPolicyClass: AlwaysAllowEntityPrivacyPolicy,
        };
    }
}
class TestLeafNoInferenceEntity extends Entity_1.default {
    static defineCompanionDefinition() {
        return {
            entityClass: TestLeafNoInferenceEntity,
            entityConfiguration: new EntityConfiguration_1.default({
                idField: 'id',
                tableName: 'blah_3',
                schema: {
                    id: new EntityFields_1.UUIDField({
                        columnName: 'custom_id',
                    }),
                    test_entity_id: new EntityFields_1.UUIDField({
                        columnName: 'test_entity_id',
                        association: {
                            associatedEntityClass: TestEntity,
                            edgeDeletionBehavior: EntityFieldDefinition_1.EntityEdgeDeletionBehavior.CASCADE_DELETE,
                        },
                    }),
                },
                databaseAdapterFlavor: 'postgres',
                cacheAdapterFlavor: 'redis',
            }),
            privacyPolicyClass: AlwaysAllowEntityPrivacyPolicy,
        };
    }
}
//# sourceMappingURL=canViewerDeleteAsync-edgeDeletionPermissionInferenceBehavior-test.js.map