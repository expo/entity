"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant_1 = __importDefault(require("invariant"));
const uuidv7_1 = require("uuidv7");
const EntityDatabaseAdapter_1 = __importStar(require("../../EntityDatabaseAdapter"));
const EntityFields_1 = require("../../EntityFields");
const EntityFieldTransformationUtils_1 = require("../../internal/EntityFieldTransformationUtils");
const maps_1 = require("../collections/maps");
class StubDatabaseAdapter extends EntityDatabaseAdapter_1.default {
    entityConfiguration2;
    dataStore;
    constructor(entityConfiguration2, dataStore) {
        super(entityConfiguration2);
        this.entityConfiguration2 = entityConfiguration2;
        this.dataStore = dataStore;
    }
    static convertFieldObjectsToDataStore(entityConfiguration, dataStore) {
        return (0, maps_1.mapMap)(dataStore, (objectsForTable) => objectsForTable.map((objectForTable) => (0, EntityFieldTransformationUtils_1.transformFieldsToDatabaseObject)(entityConfiguration, new Map(), objectForTable)));
    }
    getObjectCollectionForTable(tableName) {
        return (0, maps_1.computeIfAbsent)(this.dataStore, tableName, () => []);
    }
    getFieldTransformerMap() {
        return new Map();
    }
    async fetchManyWhereInternalAsync(_queryInterface, tableName, tableField, tableValues) {
        const objectCollection = this.getObjectCollectionForTable(tableName);
        return tableValues.reduce((acc, fieldValue) => {
            return acc.concat(objectCollection.filter((obj) => {
                return obj[tableField] === fieldValue;
            }));
        }, []);
    }
    static compareByOrderBys(orderBys, objectA, objectB) {
        if (orderBys.length === 0) {
            return 0;
        }
        const currentOrderBy = orderBys[0];
        const aField = objectA[currentOrderBy.columnName];
        const bField = objectB[currentOrderBy.columnName];
        switch (currentOrderBy.order) {
            case EntityDatabaseAdapter_1.OrderByOrdering.DESCENDING: {
                // simulate NULLS FIRST for DESC
                if (aField === null && bField === null) {
                    return 0;
                }
                else if (aField === null) {
                    return -1;
                }
                else if (bField === null) {
                    return 1;
                }
                return aField > bField
                    ? -1
                    : aField < bField
                        ? 1
                        : this.compareByOrderBys(orderBys.slice(1), objectA, objectB);
            }
            case EntityDatabaseAdapter_1.OrderByOrdering.ASCENDING: {
                // simulate NULLS LAST for ASC
                if (aField === null && bField === null) {
                    return 0;
                }
                else if (bField === null) {
                    return -1;
                }
                else if (aField === null) {
                    return 1;
                }
                return bField > aField
                    ? -1
                    : bField < aField
                        ? 1
                        : this.compareByOrderBys(orderBys.slice(1), objectA, objectB);
            }
        }
    }
    async fetchManyByFieldEqualityConjunctionInternalAsync(_queryInterface, tableName, tableFieldSingleValueEqualityOperands, tableFieldMultiValueEqualityOperands, querySelectionModifiers) {
        let filteredObjects = this.getObjectCollectionForTable(tableName);
        for (const { tableField, tableValue } of tableFieldSingleValueEqualityOperands) {
            filteredObjects = filteredObjects.filter((obj) => obj[tableField] === tableValue);
        }
        for (const { tableField, tableValues } of tableFieldMultiValueEqualityOperands) {
            filteredObjects = filteredObjects.filter((obj) => tableValues.includes(obj[tableField]));
        }
        const orderBy = querySelectionModifiers.orderBy;
        if (orderBy !== undefined) {
            filteredObjects = filteredObjects.sort((a, b) => StubDatabaseAdapter.compareByOrderBys(orderBy, a, b));
        }
        const offset = querySelectionModifiers.offset;
        if (offset !== undefined) {
            filteredObjects = filteredObjects.slice(offset);
        }
        const limit = querySelectionModifiers.limit;
        if (limit !== undefined) {
            filteredObjects = filteredObjects.slice(0, 0 + limit);
        }
        return filteredObjects;
    }
    fetchManyByRawWhereClauseInternalAsync(_queryInterface, _tableName, _rawWhereClause, _bindings, _querySelectionModifiers) {
        throw new Error('Raw WHERE clauses not supported for StubDatabaseAdapter');
    }
    generateRandomID() {
        const idSchemaField = this.entityConfiguration2.schema.get(this.entityConfiguration2.idField);
        (0, invariant_1.default)(idSchemaField, `No schema field found for ${String(this.entityConfiguration2.idField)}`);
        if (idSchemaField instanceof EntityFields_1.StringField) {
            return (0, uuidv7_1.uuidv7)();
        }
        else if (idSchemaField instanceof EntityFields_1.IntField) {
            return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
        }
        else {
            throw new Error(`Unsupported ID type for StubDatabaseAdapter: ${idSchemaField.constructor.name}`);
        }
    }
    async insertInternalAsync(_queryInterface, tableName, object) {
        const objectCollection = this.getObjectCollectionForTable(tableName);
        const idField = (0, EntityFieldTransformationUtils_1.getDatabaseFieldForEntityField)(this.entityConfiguration2, this.entityConfiguration2.idField);
        const objectToInsert = {
            [idField]: this.generateRandomID(),
            ...object,
        };
        objectCollection.push(objectToInsert);
        return [objectToInsert];
    }
    async updateInternalAsync(_queryInterface, tableName, tableIdField, id, object) {
        // SQL does not support empty updates, mirror behavior here for better test simulation
        if (Object.keys(object).length === 0) {
            throw new Error(`Empty update (${tableIdField} = ${id})`);
        }
        const objectCollection = this.getObjectCollectionForTable(tableName);
        const objectIndex = objectCollection.findIndex((obj) => {
            return obj[tableIdField] === id;
        });
        (0, invariant_1.default)(objectIndex >= 0, 'should exist');
        objectCollection[objectIndex] = {
            ...objectCollection[objectIndex],
            ...object,
        };
        return [objectCollection[objectIndex]];
    }
    async deleteInternalAsync(_queryInterface, tableName, tableIdField, id) {
        const objectCollection = this.getObjectCollectionForTable(tableName);
        const objectIndex = objectCollection.findIndex((obj) => {
            return obj[tableIdField] === id;
        });
        if (objectIndex < 0) {
            return 0;
        }
        objectCollection.splice(objectIndex, 1);
        return 1;
    }
}
exports.default = StubDatabaseAdapter;
//# sourceMappingURL=StubDatabaseAdapter.js.map