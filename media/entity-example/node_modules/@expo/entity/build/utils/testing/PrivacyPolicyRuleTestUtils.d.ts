import { EntityPrivacyPolicyEvaluationContext } from '../../EntityPrivacyPolicy';
import { EntityQueryContext } from '../../EntityQueryContext';
import ReadonlyEntity from '../../ReadonlyEntity';
import ViewerContext from '../../ViewerContext';
import PrivacyPolicyRule from '../../rules/PrivacyPolicyRule';
export interface Case<TFields extends object, TID extends NonNullable<TFields[TSelectedFields]>, TViewerContext extends ViewerContext, TEntity extends ReadonlyEntity<TFields, TID, TViewerContext, TSelectedFields>, TSelectedFields extends keyof TFields> {
    viewerContext: TViewerContext;
    queryContext: EntityQueryContext;
    evaluationContext: EntityPrivacyPolicyEvaluationContext<TFields, TID, TViewerContext, TEntity, TSelectedFields>;
    entity: TEntity;
}
export type CaseMap<TFields extends object, TID extends NonNullable<TFields[TSelectedFields]>, TViewerContext extends ViewerContext, TEntity extends ReadonlyEntity<TFields, TID, TViewerContext, TSelectedFields>, TSelectedFields extends keyof TFields> = Map<string, () => Promise<Case<TFields, TID, TViewerContext, TEntity, TSelectedFields>>>;
/**
 * Useful for defining test cases that have async preconditions.
 */
export declare const describePrivacyPolicyRuleWithAsyncTestCase: <TFields extends object, TID extends NonNullable<TFields[TSelectedFields]>, TViewerContext extends ViewerContext, TEntity extends ReadonlyEntity<TFields, TID, TViewerContext, TSelectedFields>, TSelectedFields extends keyof TFields = keyof TFields>(privacyPolicyRule: PrivacyPolicyRule<TFields, TID, TViewerContext, TEntity, TSelectedFields>, { allowCases, skipCases, denyCases, }: {
    allowCases?: CaseMap<TFields, TID, TViewerContext, TEntity, TSelectedFields>;
    skipCases?: CaseMap<TFields, TID, TViewerContext, TEntity, TSelectedFields>;
    denyCases?: CaseMap<TFields, TID, TViewerContext, TEntity, TSelectedFields>;
}) => void;
/**
 * For test simple privacy rules that don't have complex async preconditions.
 */
export declare const describePrivacyPolicyRule: <TFields extends object, TID extends NonNullable<TFields[TSelectedFields]>, TViewerContext extends ViewerContext, TEntity extends ReadonlyEntity<TFields, TID, TViewerContext, TSelectedFields>, TSelectedFields extends keyof TFields = keyof TFields>(privacyPolicyRule: PrivacyPolicyRule<TFields, TID, TViewerContext, TEntity, TSelectedFields>, { allowCases, skipCases, denyCases, }: {
    allowCases?: Case<TFields, TID, TViewerContext, TEntity, TSelectedFields>[];
    skipCases?: Case<TFields, TID, TViewerContext, TEntity, TSelectedFields>[];
    denyCases?: Case<TFields, TID, TViewerContext, TEntity, TSelectedFields>[];
}) => void;
