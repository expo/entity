import EntityConfiguration from '../../EntityConfiguration';
import IEntityCacheAdapter from '../../IEntityCacheAdapter';
import IEntityCacheAdapterProvider from '../../IEntityCacheAdapterProvider';
import { CacheLoadResult } from '../../internal/ReadThroughEntityCache';
export declare class NoCacheStubCacheAdapterProvider implements IEntityCacheAdapterProvider {
    getCacheAdapter<TFields extends Record<string, any>>(_entityConfiguration: EntityConfiguration<TFields>): IEntityCacheAdapter<TFields>;
}
export declare class NoCacheStubCacheAdapter<TFields> implements IEntityCacheAdapter<TFields> {
    loadManyAsync<N extends keyof TFields>(_fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<ReadonlyMap<NonNullable<TFields[N]>, CacheLoadResult<TFields>>>;
    cacheManyAsync<N extends keyof TFields>(_fieldName: N, _objectMap: ReadonlyMap<NonNullable<TFields[N]>, Readonly<TFields>>): Promise<void>;
    cacheDBMissesAsync<N extends keyof TFields>(_fieldName: N, _fieldValues: readonly NonNullable<TFields[N]>[]): Promise<void>;
    invalidateManyAsync<N extends keyof TFields>(_fieldName: N, _fieldValues: readonly TFields[N][]): Promise<void>;
}
export declare class InMemoryFullCacheStubCacheAdapterProvider implements IEntityCacheAdapterProvider {
    cache: Map<string, Readonly<object>>;
    getCacheAdapter<TFields extends Record<string, any>>(entityConfiguration: EntityConfiguration<TFields>): IEntityCacheAdapter<TFields>;
}
export declare class InMemoryFullCacheStubCacheAdapter<TFields extends Record<string, any>> implements IEntityCacheAdapter<TFields> {
    private readonly entityConfiguration;
    readonly cache: Map<string, Readonly<TFields>>;
    constructor(entityConfiguration: EntityConfiguration<TFields>, cache: Map<string, Readonly<TFields>>);
    loadManyAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<ReadonlyMap<NonNullable<TFields[N]>, CacheLoadResult<TFields>>>;
    cacheManyAsync<N extends keyof TFields>(fieldName: N, objectMap: ReadonlyMap<NonNullable<TFields[N]>, Readonly<TFields>>): Promise<void>;
    cacheDBMissesAsync<N extends keyof TFields>(_fieldName: N, _fieldValues: readonly NonNullable<TFields[N]>[]): Promise<void>;
    invalidateManyAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<void>;
    private createCacheKey;
}
