import EntityConfiguration from '../../EntityConfiguration';
import EntityDatabaseAdapter, { TableFieldSingleValueEqualityCondition, TableFieldMultiValueEqualityCondition, TableQuerySelectionModifiers } from '../../EntityDatabaseAdapter';
import { FieldTransformerMap } from '../../internal/EntityFieldTransformationUtils';
export default class StubDatabaseAdapter<T extends Record<string, any>> extends EntityDatabaseAdapter<T> {
    private readonly entityConfiguration2;
    private readonly dataStore;
    constructor(entityConfiguration2: EntityConfiguration<T>, dataStore: Map<string, Readonly<{
        [key: string]: any;
    }>[]>);
    static convertFieldObjectsToDataStore<T extends Record<string, any>>(entityConfiguration: EntityConfiguration<T>, dataStore: Map<string, Readonly<T>[]>): Map<string, Readonly<{
        [key: string]: any;
    }>[]>;
    getObjectCollectionForTable(tableName: string): {
        [key: string]: any;
    }[];
    protected getFieldTransformerMap(): FieldTransformerMap;
    protected fetchManyWhereInternalAsync(_queryInterface: any, tableName: string, tableField: string, tableValues: readonly any[]): Promise<object[]>;
    private static compareByOrderBys;
    protected fetchManyByFieldEqualityConjunctionInternalAsync(_queryInterface: any, tableName: string, tableFieldSingleValueEqualityOperands: TableFieldSingleValueEqualityCondition[], tableFieldMultiValueEqualityOperands: TableFieldMultiValueEqualityCondition[], querySelectionModifiers: TableQuerySelectionModifiers): Promise<object[]>;
    protected fetchManyByRawWhereClauseInternalAsync(_queryInterface: any, _tableName: string, _rawWhereClause: string, _bindings: object | any[], _querySelectionModifiers: TableQuerySelectionModifiers): Promise<object[]>;
    private generateRandomID;
    protected insertInternalAsync(_queryInterface: any, tableName: string, object: object): Promise<object[]>;
    protected updateInternalAsync(_queryInterface: any, tableName: string, tableIdField: string, id: any, object: object): Promise<object[]>;
    protected deleteInternalAsync(_queryInterface: any, tableName: string, tableIdField: string, id: any): Promise<number>;
}
