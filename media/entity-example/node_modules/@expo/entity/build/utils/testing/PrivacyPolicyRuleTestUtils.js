"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.describePrivacyPolicyRule = exports.describePrivacyPolicyRuleWithAsyncTestCase = void 0;
const PrivacyPolicyRule_1 = require("../../rules/PrivacyPolicyRule");
/**
 * Useful for defining test cases that have async preconditions.
 */
const describePrivacyPolicyRuleWithAsyncTestCase = (privacyPolicyRule, { allowCases = new Map(), skipCases = new Map(), denyCases = new Map(), }) => {
    describe(privacyPolicyRule.constructor.name, () => {
        if (allowCases && allowCases.size > 0) {
            describe('allow cases', () => {
                test.each(Array.from(allowCases.keys()))('%p', async (caseKey) => {
                    const { viewerContext, queryContext, evaluationContext, entity } = await allowCases.get(caseKey)();
                    await expect(privacyPolicyRule.evaluateAsync(viewerContext, queryContext, evaluationContext, entity)).resolves.toEqual(PrivacyPolicyRule_1.RuleEvaluationResult.ALLOW);
                });
            });
        }
        if (skipCases && skipCases.size > 0) {
            describe('skip cases', () => {
                test.each(Array.from(skipCases.keys()))('%p', async (caseKey) => {
                    const { viewerContext, queryContext, evaluationContext, entity } = await skipCases.get(caseKey)();
                    await expect(privacyPolicyRule.evaluateAsync(viewerContext, queryContext, evaluationContext, entity)).resolves.toEqual(PrivacyPolicyRule_1.RuleEvaluationResult.SKIP);
                });
            });
        }
        if (denyCases && denyCases.size > 0) {
            describe('deny cases', () => {
                test.each(Array.from(denyCases.keys()))('%p', async (caseKey) => {
                    const { viewerContext, queryContext, evaluationContext, entity } = await denyCases.get(caseKey)();
                    await expect(privacyPolicyRule.evaluateAsync(viewerContext, queryContext, evaluationContext, entity)).resolves.toEqual(PrivacyPolicyRule_1.RuleEvaluationResult.DENY);
                });
            });
        }
    });
};
exports.describePrivacyPolicyRuleWithAsyncTestCase = describePrivacyPolicyRuleWithAsyncTestCase;
/**
 * For test simple privacy rules that don't have complex async preconditions.
 */
const describePrivacyPolicyRule = (privacyPolicyRule, { allowCases = [], skipCases = [], denyCases = [], }) => {
    const makeCasesMap = (cases) => cases.reduce((acc, testCase, index) => {
        acc.set(`case ${index}`, async () => testCase);
        return acc;
    }, new Map());
    return (0, exports.describePrivacyPolicyRuleWithAsyncTestCase)(privacyPolicyRule, {
        allowCases: makeCasesMap(allowCases),
        skipCases: makeCasesMap(skipCases),
        denyCases: makeCasesMap(denyCases),
    });
};
exports.describePrivacyPolicyRule = describePrivacyPolicyRule;
//# sourceMappingURL=PrivacyPolicyRuleTestUtils.js.map