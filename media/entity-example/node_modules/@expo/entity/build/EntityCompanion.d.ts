import EntityCompanionProvider, { EntityCompanionDefinition } from './EntityCompanionProvider';
import EntityLoaderFactory from './EntityLoaderFactory';
import EntityMutatorFactory from './EntityMutatorFactory';
import EntityPrivacyPolicy from './EntityPrivacyPolicy';
import EntityQueryContextProvider from './EntityQueryContextProvider';
import ReadonlyEntity from './ReadonlyEntity';
import ViewerContext from './ViewerContext';
import EntityTableDataCoordinator from './internal/EntityTableDataCoordinator';
import IEntityMetricsAdapter from './metrics/IEntityMetricsAdapter';
export interface IPrivacyPolicyClass<TPrivacyPolicy> {
    new (): TPrivacyPolicy;
}
/**
 * Composition root responsible for orchestrating setup of Entity mutators and loaders.
 */
export default class EntityCompanion<TFields extends object, TID extends NonNullable<TFields[TSelectedFields]>, TViewerContext extends ViewerContext, TEntity extends ReadonlyEntity<TFields, TID, TViewerContext, TSelectedFields>, TPrivacyPolicy extends EntityPrivacyPolicy<TFields, TID, TViewerContext, TEntity, TSelectedFields>, TSelectedFields extends keyof TFields> {
    readonly entityCompanionProvider: EntityCompanionProvider;
    readonly entityCompanionDefinition: EntityCompanionDefinition<TFields, TID, TViewerContext, TEntity, TPrivacyPolicy, TSelectedFields>;
    private readonly tableDataCoordinator;
    private readonly metricsAdapter;
    readonly privacyPolicy: TPrivacyPolicy;
    private readonly entityLoaderFactory;
    private readonly entityMutatorFactory;
    constructor(entityCompanionProvider: EntityCompanionProvider, entityCompanionDefinition: EntityCompanionDefinition<TFields, TID, TViewerContext, TEntity, TPrivacyPolicy, TSelectedFields>, tableDataCoordinator: EntityTableDataCoordinator<TFields>, metricsAdapter: IEntityMetricsAdapter);
    getLoaderFactory(): EntityLoaderFactory<TFields, TID, TViewerContext, TEntity, TPrivacyPolicy, TSelectedFields>;
    getMutatorFactory(): EntityMutatorFactory<TFields, TID, TViewerContext, TEntity, TPrivacyPolicy, TSelectedFields>;
    /**
     * Get the query context provider for this entity.
     */
    getQueryContextProvider(): EntityQueryContextProvider;
    /**
     * Get the IEntityMetricsAdapter for this companion.
     */
    getMetricsAdapter(): IEntityMetricsAdapter;
}
