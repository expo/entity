"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant_1 = __importDefault(require("invariant"));
const EntityCompanion_1 = __importDefault(require("./EntityCompanion"));
const EntityTableDataCoordinator_1 = __importDefault(require("./internal/EntityTableDataCoordinator"));
const maps_1 = require("./utils/collections/maps");
/**
 * An instance of the Entity framework.
 *
 * Required to create a ViewerContext, which is the application entry point
 * into the framework.
 *
 * Internally, this is a lazy entity companion factory that instantiates and caches one
 * EntityCompanion for each type of Entity.
 */
class EntityCompanionProvider {
    metricsAdapter;
    databaseAdapterFlavors;
    cacheAdapterFlavors;
    globalMutationTriggers;
    companionDefinitionMap = new Map();
    companionMap = new Map();
    tableDataCoordinatorMap = new Map();
    /**
     * Instantiate an Entity framework.
     * @param metricsAdapter - An IEntityMetricsAdapter for collecting metrics on this instance
     * @param databaseAdapterFlavors - Database adapter configurations for this instance
     * @param cacheAdapterFlavors - Cache adapter configurations for this instance
     * @param globalMutationTriggers - Optional set of EntityMutationTrigger to run for all entity mutations systemwide.
     */
    constructor(metricsAdapter, databaseAdapterFlavors, cacheAdapterFlavors, globalMutationTriggers = {}) {
        this.metricsAdapter = metricsAdapter;
        this.databaseAdapterFlavors = databaseAdapterFlavors;
        this.cacheAdapterFlavors = cacheAdapterFlavors;
        this.globalMutationTriggers = globalMutationTriggers;
    }
    /**
     * Get the entity companion for specified entity. If not already computed and cached, the entity
     * companion is constructed using the configuration provided by the factory.
     *
     * @param entityClass - entity class to load
     */
    getCompanionForEntity(entityClass) {
        const entityCompanionDefinition = (0, maps_1.computeIfAbsent)(this.companionDefinitionMap, entityClass.name, () => entityClass.defineCompanionDefinition());
        const tableDataCoordinator = this.getTableDataCoordinatorForEntity(entityCompanionDefinition.entityConfiguration, entityClass.name);
        return (0, maps_1.computeIfAbsent)(this.companionMap, entityClass.name, () => {
            return new EntityCompanion_1.default(this, entityCompanionDefinition, tableDataCoordinator, this.metricsAdapter);
        });
    }
    getQueryContextProviderForDatabaseAdaptorFlavor(databaseAdapterFlavor) {
        const entityDatabaseAdapterFlavor = this.databaseAdapterFlavors.get(databaseAdapterFlavor);
        (0, invariant_1.default)(entityDatabaseAdapterFlavor, `No database adaptor configuration found for flavor: ${databaseAdapterFlavor}`);
        return entityDatabaseAdapterFlavor.queryContextProvider;
    }
    getTableDataCoordinatorForEntity(entityConfiguration, entityClassName) {
        return (0, maps_1.computeIfAbsent)(this.tableDataCoordinatorMap, entityConfiguration.tableName, () => {
            const entityDatabaseAdapterFlavor = this.databaseAdapterFlavors.get(entityConfiguration.databaseAdapterFlavor);
            (0, invariant_1.default)(entityDatabaseAdapterFlavor, `No database adaptor configuration found for flavor: ${entityConfiguration.databaseAdapterFlavor}`);
            const entityCacheAdapterFlavor = this.cacheAdapterFlavors.get(entityConfiguration.cacheAdapterFlavor);
            (0, invariant_1.default)(entityCacheAdapterFlavor, `No cache adaptor configuration found for flavor: ${entityConfiguration.cacheAdapterFlavor}`);
            return new EntityTableDataCoordinator_1.default(entityConfiguration, entityDatabaseAdapterFlavor.adapterProvider, entityCacheAdapterFlavor.cacheAdapterProvider, entityDatabaseAdapterFlavor.queryContextProvider, this.metricsAdapter, entityClassName);
        });
    }
}
exports.default = EntityCompanionProvider;
//# sourceMappingURL=EntityCompanionProvider.js.map