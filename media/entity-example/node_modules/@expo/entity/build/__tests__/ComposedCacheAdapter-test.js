"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOES_NOT_EXIST_LOCAL_MEMORY_CACHE = void 0;
const invariant_1 = __importDefault(require("invariant"));
const ComposedEntityCacheAdapter_1 = __importDefault(require("../ComposedEntityCacheAdapter"));
const EntityConfiguration_1 = __importDefault(require("../EntityConfiguration"));
const EntityFields_1 = require("../EntityFields");
const ReadThroughEntityCache_1 = require("../internal/ReadThroughEntityCache");
const entityConfiguration = new EntityConfiguration_1.default({
    idField: 'id',
    tableName: 'blah',
    schema: {
        id: new EntityFields_1.UUIDField({ columnName: 'id', cache: true }),
    },
    databaseAdapterFlavor: 'postgres',
    cacheAdapterFlavor: 'local-memory-and-redis',
});
exports.DOES_NOT_EXIST_LOCAL_MEMORY_CACHE = Symbol('doesNotExist');
class TestLocalCacheAdapter {
    entityConfiguration;
    cache;
    constructor(entityConfiguration, cache) {
        this.entityConfiguration = entityConfiguration;
        this.cache = cache;
    }
    async loadManyAsync(fieldName, fieldValues) {
        const localMemoryCacheKeyToFieldValueMapping = new Map(fieldValues.map((fieldValue) => [this.makeCacheKey(fieldName, fieldValue), fieldValue]));
        const cacheResults = new Map();
        for (const [cacheKey, fieldValue] of localMemoryCacheKeyToFieldValueMapping) {
            const cacheResult = this.cache.get(cacheKey);
            if (cacheResult === exports.DOES_NOT_EXIST_LOCAL_MEMORY_CACHE) {
                cacheResults.set(fieldValue, {
                    status: ReadThroughEntityCache_1.CacheStatus.NEGATIVE,
                });
            }
            else if (cacheResult) {
                cacheResults.set(fieldValue, {
                    status: ReadThroughEntityCache_1.CacheStatus.HIT,
                    item: cacheResult,
                });
            }
            else {
                cacheResults.set(fieldValue, {
                    status: ReadThroughEntityCache_1.CacheStatus.MISS,
                });
            }
        }
        return cacheResults;
    }
    async cacheManyAsync(fieldName, objectMap) {
        for (const [fieldValue, item] of objectMap) {
            const cacheKey = this.makeCacheKey(fieldName, fieldValue);
            this.cache.set(cacheKey, item);
        }
    }
    async cacheDBMissesAsync(fieldName, fieldValues) {
        for (const fieldValue of fieldValues) {
            const cacheKey = this.makeCacheKey(fieldName, fieldValue);
            this.cache.set(cacheKey, exports.DOES_NOT_EXIST_LOCAL_MEMORY_CACHE);
        }
    }
    async invalidateManyAsync(fieldName, fieldValues) {
        for (const fieldValue of fieldValues) {
            const cacheKey = this.makeCacheKey(fieldName, fieldValue);
            this.cache.delete(cacheKey);
        }
    }
    makeCacheKey(fieldName, fieldValue) {
        const columnName = this.entityConfiguration.entityToDBFieldsKeyMapping.get(fieldName);
        (0, invariant_1.default)(columnName, `database field mapping missing for ${String(fieldName)}`);
        const parts = [
            this.entityConfiguration.tableName,
            `${this.entityConfiguration.cacheKeyVersion}`,
            columnName,
            String(fieldValue),
        ];
        const delimiter = ':';
        const escapedParts = parts.map((part) => part.replace('\\', '\\\\').replace(delimiter, `\\${delimiter}`));
        return escapedParts.join(delimiter);
    }
}
function makeTestCacheAdapters() {
    const primaryCache = new Map();
    const primaryCacheAdapter = new TestLocalCacheAdapter(entityConfiguration, primaryCache);
    const fallbackCache = new Map();
    const fallbackCacheAdapter = new TestLocalCacheAdapter(entityConfiguration, fallbackCache);
    const cacheAdapter = new ComposedEntityCacheAdapter_1.default([primaryCacheAdapter, fallbackCacheAdapter]);
    return {
        primaryCache,
        primaryCacheAdapter,
        fallbackCache,
        fallbackCacheAdapter,
        cacheAdapter,
    };
}
describe(ComposedEntityCacheAdapter_1.default, () => {
    describe('loadManyAsync', () => {
        it('returns primary results when populated', async () => {
            const { primaryCacheAdapter, cacheAdapter } = makeTestCacheAdapters();
            const cacheHits = new Map([['test-id-1', { id: 'test-id-1' }]]);
            await primaryCacheAdapter.cacheManyAsync('id', cacheHits);
            await primaryCacheAdapter.cacheDBMissesAsync('id', ['test-id-2']);
            const results = await cacheAdapter.loadManyAsync('id', [
                'test-id-1',
                'test-id-2',
                'test-id-3',
            ]);
            expect(results.get('test-id-1')).toMatchObject({
                status: ReadThroughEntityCache_1.CacheStatus.HIT,
                item: { id: 'test-id-1' },
            });
            expect(results.get('test-id-2')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.NEGATIVE });
            expect(results.get('test-id-3')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.MISS });
            expect(results.size).toBe(3);
        });
        it('returns fallback adapter results primary is empty', async () => {
            const { fallbackCacheAdapter, cacheAdapter } = makeTestCacheAdapters();
            const cacheHits = new Map([['test-id-1', { id: 'test-id-1' }]]);
            await fallbackCacheAdapter.cacheManyAsync('id', cacheHits);
            await fallbackCacheAdapter.cacheDBMissesAsync('id', ['test-id-2']);
            const results = await cacheAdapter.loadManyAsync('id', [
                'test-id-1',
                'test-id-2',
                'test-id-3',
            ]);
            expect(results.get('test-id-1')).toMatchObject({
                status: ReadThroughEntityCache_1.CacheStatus.HIT,
                item: { id: 'test-id-1' },
            });
            expect(results.get('test-id-2')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.NEGATIVE });
            expect(results.get('test-id-3')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.MISS });
            expect(results.size).toBe(3);
        });
        it('populates primary adapter with fallback adapter results', async () => {
            const { primaryCacheAdapter, fallbackCacheAdapter, cacheAdapter } = makeTestCacheAdapters();
            const cacheHits = new Map([['test-id-1', { id: 'test-id-1' }]]);
            await fallbackCacheAdapter.cacheManyAsync('id', cacheHits);
            await fallbackCacheAdapter.cacheDBMissesAsync('id', ['test-id-2']);
            // should populate primary cache with fallback cache results
            await cacheAdapter.loadManyAsync('id', ['test-id-1', 'test-id-2', 'test-id-3']);
            const primaryResults = await primaryCacheAdapter.loadManyAsync('id', [
                'test-id-1',
                'test-id-2',
                'test-id-3',
            ]);
            expect(primaryResults.get('test-id-1')).toMatchObject({
                status: ReadThroughEntityCache_1.CacheStatus.HIT,
                item: { id: 'test-id-1' },
            });
            expect(primaryResults.get('test-id-2')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.NEGATIVE });
            expect(primaryResults.get('test-id-3')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.MISS });
            expect(primaryResults.size).toBe(3);
            // ensure that populating the primary cache doesn't change the output
            const composedResults = await cacheAdapter.loadManyAsync('id', [
                'test-id-1',
                'test-id-2',
                'test-id-3',
            ]);
            expect(composedResults.get('test-id-1')).toMatchObject({
                status: ReadThroughEntityCache_1.CacheStatus.HIT,
                item: { id: 'test-id-1' },
            });
            expect(composedResults.get('test-id-2')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.NEGATIVE });
            expect(composedResults.get('test-id-3')).toMatchObject({ status: ReadThroughEntityCache_1.CacheStatus.MISS });
            expect(composedResults.size).toBe(3);
        });
        it('returns empty map when passed empty array of fieldValues', async () => {
            const { cacheAdapter } = makeTestCacheAdapters();
            const results = await cacheAdapter.loadManyAsync('id', []);
            expect(results).toEqual(new Map());
        });
        it('handles 0 cache adapter compose case', async () => {
            const cacheAdapter = new ComposedEntityCacheAdapter_1.default([]);
            const results = await cacheAdapter.loadManyAsync('id', []);
            expect(results).toEqual(new Map());
        });
    });
    describe('cacheManyAsync', () => {
        it('correctly caches all objects', async () => {
            const { primaryCache, primaryCacheAdapter, fallbackCache, fallbackCacheAdapter, cacheAdapter, } = makeTestCacheAdapters();
            await cacheAdapter.cacheManyAsync('id', new Map([['test-id-1', { id: 'test-id-1' }]]));
            const primaryLocalMemoryCacheKey = primaryCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(primaryCache.get(primaryLocalMemoryCacheKey)).toMatchObject({
                id: 'test-id-1',
            });
            const fallbackLocalMemoryCacheKey = fallbackCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(fallbackCache.get(fallbackLocalMemoryCacheKey)).toMatchObject({
                id: 'test-id-1',
            });
        });
    });
    describe('cacheDBMissesAsync', () => {
        it('correctly caches misses', async () => {
            const { primaryCache, primaryCacheAdapter, fallbackCache, fallbackCacheAdapter, cacheAdapter, } = makeTestCacheAdapters();
            await cacheAdapter.cacheDBMissesAsync('id', ['test-id-1']);
            const primaryLocalMemoryCacheKey = primaryCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(primaryCache.get(primaryLocalMemoryCacheKey)).toBe(exports.DOES_NOT_EXIST_LOCAL_MEMORY_CACHE);
            const fallbackLocalMemoryCacheKey = fallbackCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(fallbackCache.get(fallbackLocalMemoryCacheKey)).toBe(exports.DOES_NOT_EXIST_LOCAL_MEMORY_CACHE);
        });
    });
    describe('invalidateManyAsync', () => {
        it('invalidates correctly', async () => {
            const { primaryCache, primaryCacheAdapter, fallbackCache, fallbackCacheAdapter, cacheAdapter, } = makeTestCacheAdapters();
            const cacheHits = new Map([['test-id-1', { id: 'test-id-1' }]]);
            await primaryCacheAdapter.cacheManyAsync('id', cacheHits);
            await primaryCacheAdapter.cacheDBMissesAsync('id', ['test-id-2']);
            await fallbackCacheAdapter.cacheManyAsync('id', cacheHits);
            await fallbackCacheAdapter.cacheDBMissesAsync('id', ['test-id-2']);
            await cacheAdapter.invalidateManyAsync('id', ['test-id-1', 'test-id-2']);
            const primaryLocalMemoryCacheKey1 = primaryCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(primaryCache.get(primaryLocalMemoryCacheKey1)).toBe(undefined);
            const primaryLocalMemoryCacheKey2 = primaryCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(primaryCache.get(primaryLocalMemoryCacheKey2)).toBe(undefined);
            const fallbackLocalMemoryCacheKey1 = fallbackCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(fallbackCache.get(fallbackLocalMemoryCacheKey1)).toBe(undefined);
            const fallbackLocalMemoryCacheKey2 = fallbackCacheAdapter['makeCacheKey']('id', 'test-id-1');
            expect(fallbackCache.get(fallbackLocalMemoryCacheKey2)).toBe(undefined);
        });
        it('returns when passed empty array of fieldValues', async () => {
            const { cacheAdapter } = makeTestCacheAdapters();
            await cacheAdapter.invalidateManyAsync('id', []);
        });
    });
});
//# sourceMappingURL=ComposedCacheAdapter-test.js.map