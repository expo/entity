"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts_mockito_1 = require("ts-mockito");
const EntityAssociationLoader_1 = __importDefault(require("../EntityAssociationLoader"));
const EntityLoader_1 = __importDefault(require("../EntityLoader"));
const ReadonlyEntity_1 = __importDefault(require("../ReadonlyEntity"));
const ViewerContext_1 = __importDefault(require("../ViewerContext"));
const SimpleTestEntity_1 = __importDefault(require("../testfixtures/SimpleTestEntity"));
const TestEntity_1 = __importDefault(require("../testfixtures/TestEntity"));
const createUnitTestEntityCompanionProvider_1 = require("../utils/testing/createUnitTestEntityCompanionProvider");
describe(ReadonlyEntity_1.default, () => {
    describe('getID', () => {
        it('returns correct value', () => {
            const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
            const data = {
                id: 'what',
            };
            const testEntity = new SimpleTestEntity_1.default({
                viewerContext,
                id: 'what',
                databaseFields: data,
                selectedFields: data,
            });
            expect(testEntity.getID()).toEqual('what');
        });
    });
    describe('toString', () => {
        it('returns correct value', () => {
            const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
            const data = {
                id: 'what',
            };
            const testEntity = new SimpleTestEntity_1.default({
                viewerContext,
                id: 'what',
                databaseFields: data,
                selectedFields: data,
            });
            expect(testEntity.toString()).toEqual('SimpleTestEntity[what]');
        });
    });
    describe('getUniqueIdentifier', () => {
        it('returns a different value for two different entities of the same type', () => {
            const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
            const testEntity = new SimpleTestEntity_1.default({
                viewerContext,
                id: '1',
                databaseFields: {
                    id: '1',
                },
                selectedFields: {
                    id: '1',
                },
            });
            const testEntity2 = new SimpleTestEntity_1.default({
                viewerContext,
                id: '2',
                databaseFields: {
                    id: '2',
                },
                selectedFields: {
                    id: '2',
                },
            });
            expect(testEntity.getUniqueIdentifier()).not.toEqual(testEntity2.getUniqueIdentifier());
        });
        it('returns the same value even if different viewer context', () => {
            const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
            const viewerContext2 = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
            const data = { id: '1' };
            const testEntity = new SimpleTestEntity_1.default({
                viewerContext,
                id: '1',
                databaseFields: data,
                selectedFields: data,
            });
            const testEntity2 = new SimpleTestEntity_1.default({
                viewerContext: viewerContext2,
                id: '1',
                databaseFields: data,
                selectedFields: data,
            });
            expect(testEntity.getUniqueIdentifier()).toEqual(testEntity2.getUniqueIdentifier());
        });
        it('returns a different value for different entities even if same ID', () => {
            const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
            const data = { id: '1' };
            const testEntity = new SimpleTestEntity_1.default({
                viewerContext,
                id: 'what',
                databaseFields: data,
                selectedFields: data,
            });
            const data2 = {
                customIdField: '1',
                testIndexedField: '2',
                stringField: '3',
                intField: 4,
                dateField: new Date(),
                nullableField: null,
            };
            const testEntity2 = new TestEntity_1.default({
                viewerContext,
                id: '1',
                databaseFields: data2,
                selectedFields: data2,
            });
            expect(testEntity.getUniqueIdentifier()).not.toEqual(testEntity2.getUniqueIdentifier());
        });
    });
    it('cannot be created without an ID', () => {
        const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
        const dataWithoutID = {};
        expect(() => {
            // eslint-disable-next-line no-new
            new SimpleTestEntity_1.default({
                viewerContext,
                id: undefined,
                databaseFields: dataWithoutID,
                selectedFields: dataWithoutID,
            });
        }).toThrow();
    });
    it('returns correct viewerCo}ntext from instantiation', () => {
        const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
        const data = {
            id: 'what',
        };
        const testEntity = new SimpleTestEntity_1.default({
            viewerContext,
            id: 'what',
            databaseFields: data,
            selectedFields: data,
        });
        expect(testEntity.getViewerContext()).toBe(viewerContext);
    });
    it('returns correct data for field getters', () => {
        const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
        const data = {
            id: 'what',
        };
        const testEntity = new SimpleTestEntity_1.default({
            viewerContext,
            id: 'what',
            databaseFields: data,
            selectedFields: data,
        });
        expect(testEntity.getField('id')).toEqual('what');
        expect(testEntity.getAllFields()).toEqual(data);
    });
    describe('associationLoader', () => {
        it('returns a new association loader', () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            const data = {
                id: 'what',
            };
            const testEntity = new SimpleTestEntity_1.default({
                viewerContext,
                id: 'what',
                databaseFields: data,
                selectedFields: data,
            });
            expect(testEntity.associationLoader()).toBeInstanceOf(EntityAssociationLoader_1.default);
        });
    });
    describe('loader', () => {
        it('creates a new EntityLoader', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            expect(SimpleTestEntity_1.default.loader(viewerContext)).toBeInstanceOf(EntityLoader_1.default);
        });
    });
});
//# sourceMappingURL=ReadonlyEntity-test.js.map