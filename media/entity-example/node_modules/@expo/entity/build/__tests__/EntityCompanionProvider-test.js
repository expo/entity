"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Entity_1 = __importDefault(require("../Entity"));
const EntityCompanionProvider_1 = __importDefault(require("../EntityCompanionProvider"));
const EntityConfiguration_1 = __importDefault(require("../EntityConfiguration"));
const EntityFields_1 = require("../EntityFields");
const EntityPrivacyPolicy_1 = __importDefault(require("../EntityPrivacyPolicy"));
const createUnitTestEntityCompanionProvider_1 = require("../utils/testing/createUnitTestEntityCompanionProvider");
const blahConfiguration = new EntityConfiguration_1.default({
    idField: 'hello',
    tableName: 'wat',
    schema: {
        hello: new EntityFields_1.StringField({
            columnName: 'hello',
        }),
    },
    databaseAdapterFlavor: 'postgres',
    cacheAdapterFlavor: 'redis',
});
class Blah1Entity extends Entity_1.default {
    static defineCompanionDefinition() {
        return {
            entityClass: Blah1Entity,
            entityConfiguration: blahConfiguration,
            privacyPolicyClass: NoOpTest1PrivacyPolicy,
        };
    }
}
class Blah2Entity extends Entity_1.default {
    static defineCompanionDefinition() {
        return {
            entityClass: Blah2Entity,
            entityConfiguration: blahConfiguration,
            privacyPolicyClass: NoOpTest2PrivacyPolicy,
        };
    }
}
class NoOpTest1PrivacyPolicy extends EntityPrivacyPolicy_1.default {
}
class NoOpTest2PrivacyPolicy extends EntityPrivacyPolicy_1.default {
}
describe(EntityCompanionProvider_1.default, () => {
    it('returns different instances for different entity types, but share table data coordinators', () => {
        const entityCompanionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
        const companion1 = entityCompanionProvider.getCompanionForEntity(Blah1Entity);
        const companion2 = entityCompanionProvider.getCompanionForEntity(Blah2Entity);
        expect(companion1).not.toEqual(companion2);
        expect(companion1['tableDataCoordinator']).toEqual(companion2['tableDataCoordinator']);
    });
});
//# sourceMappingURL=EntityCompanionProvider-test.js.map