"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant_1 = __importDefault(require("invariant"));
const EntityQueryContext_1 = require("../EntityQueryContext");
const ViewerContext_1 = __importDefault(require("../ViewerContext"));
const createUnitTestEntityCompanionProvider_1 = require("../utils/testing/createUnitTestEntityCompanionProvider");
describe(EntityQueryContext_1.EntityQueryContext, () => {
    describe('callbacks', () => {
        it('calls all callbacks, and calls invalidation first', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            const preCommitFirstCallback = jest.fn(async () => { });
            const preCommitSecondCallback = jest.fn(async () => { });
            const postCommitInvalidationCallback = jest.fn(async () => {
                (0, invariant_1.default)(preCommitFirstCallback.mock.calls.length === 1, 'preCommit should be called before postCommitInvalidation');
                (0, invariant_1.default)(preCommitSecondCallback.mock.calls.length === 1, 'preCommit should be called before postCommitInvalidation');
            });
            const postCommitCallback = jest.fn(async () => {
                (0, invariant_1.default)(preCommitFirstCallback.mock.calls.length === 1, 'preCommit should be called before postCommit');
                (0, invariant_1.default)(preCommitSecondCallback.mock.calls.length === 1, 'preCommit should be called before postCommit');
                (0, invariant_1.default)(postCommitInvalidationCallback.mock.calls.length === 1, 'postCommitInvalidation should be called before postCommit');
            });
            await viewerContext.runInTransactionForDatabaseAdaptorFlavorAsync('postgres', async (queryContext) => {
                queryContext.appendPostCommitCallback(postCommitCallback);
                queryContext.appendPostCommitInvalidationCallback(postCommitInvalidationCallback);
                queryContext.appendPreCommitCallback(preCommitSecondCallback, 2);
                queryContext.appendPreCommitCallback(preCommitFirstCallback, 1);
            });
            expect(preCommitFirstCallback).toHaveBeenCalledTimes(1);
            expect(preCommitSecondCallback).toHaveBeenCalledTimes(1);
            expect(postCommitCallback).toHaveBeenCalledTimes(1);
            expect(postCommitInvalidationCallback).toHaveBeenCalledTimes(1);
        });
        it('prevents transaction from finishing when precommit throws (post commit callbacks are not called)', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            const preCommitCallback = jest.fn(async () => {
                throw new Error('wat');
            });
            const postCommitInvalidationCallback = jest.fn(async () => { });
            const postCommitCallback = jest.fn(async () => { });
            await expect(viewerContext.runInTransactionForDatabaseAdaptorFlavorAsync('postgres', async (queryContext) => {
                queryContext.appendPostCommitCallback(postCommitCallback);
                queryContext.appendPostCommitInvalidationCallback(postCommitInvalidationCallback);
                queryContext.appendPreCommitCallback(preCommitCallback, 0);
            })).rejects.toThrowError('wat');
            expect(preCommitCallback).toHaveBeenCalledTimes(1);
            expect(postCommitCallback).toHaveBeenCalledTimes(0);
            expect(postCommitInvalidationCallback).toHaveBeenCalledTimes(0);
        });
        it('calls callbacks correctly for nested transactions', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            const preCommitCallback = jest.fn(async () => { });
            const preCommitNestedCallback = jest.fn(async () => { });
            const preCommitNestedCallbackThrow = jest.fn(async () => {
                throw new Error('wat');
            });
            const postCommitInvalidationCallback = jest.fn(async () => { });
            const postCommitCallback = jest.fn(async () => { });
            await viewerContext.runInTransactionForDatabaseAdaptorFlavorAsync('postgres', async (queryContext) => {
                queryContext.appendPostCommitCallback(postCommitCallback);
                queryContext.appendPostCommitInvalidationCallback(postCommitInvalidationCallback);
                queryContext.appendPreCommitCallback(preCommitCallback, 0);
                await Promise.all([
                    queryContext.runInNestedTransactionAsync(async (innerQueryContext) => {
                        innerQueryContext.appendPostCommitCallback(postCommitCallback);
                        innerQueryContext.appendPostCommitInvalidationCallback(postCommitInvalidationCallback);
                        innerQueryContext.appendPreCommitCallback(preCommitNestedCallback, 0);
                    }),
                    (async () => {
                        try {
                            await queryContext.runInNestedTransactionAsync(async (innerQueryContext) => {
                                // these two shouldn't be called
                                innerQueryContext.appendPostCommitCallback(postCommitCallback);
                                innerQueryContext.appendPostCommitInvalidationCallback(postCommitInvalidationCallback);
                                innerQueryContext.appendPreCommitCallback(preCommitNestedCallbackThrow, 0);
                            });
                        }
                        catch { }
                    })(),
                ]);
            });
            expect(preCommitCallback).toHaveBeenCalledTimes(1);
            expect(preCommitNestedCallback).toHaveBeenCalledTimes(1);
            expect(preCommitNestedCallbackThrow).toHaveBeenCalledTimes(1);
            expect(postCommitCallback).toHaveBeenCalledTimes(2);
            expect(postCommitInvalidationCallback).toHaveBeenCalledTimes(2);
        });
        it('does not support calling runPostCommitCallbacksAsync on nested transaction', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            await expect(viewerContext.runInTransactionForDatabaseAdaptorFlavorAsync('postgres', async (queryContext) => {
                await queryContext.runInNestedTransactionAsync(async (innerQueryContext) => {
                    await innerQueryContext.runPostCommitCallbacksAsync();
                });
            })).rejects.toThrowError('Must not call runPostCommitCallbacksAsync on EntityNestedTransactionalQueryContext');
        });
    });
    describe('transaction config', () => {
        it('passes it into the provider', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            const queryContextProvider = companionProvider.getQueryContextProviderForDatabaseAdaptorFlavor('postgres');
            const queryContextProviderSpy = jest.spyOn(queryContextProvider, 'runInTransactionAsync');
            const transactionScopeFn = async () => { };
            const transactionConfig = { isolationLevel: EntityQueryContext_1.TransactionIsolationLevel.SERIALIZABLE };
            await viewerContext.runInTransactionForDatabaseAdaptorFlavorAsync('postgres', transactionScopeFn, transactionConfig);
            expect(queryContextProviderSpy).toHaveBeenCalledWith(transactionScopeFn, transactionConfig);
        });
    });
});
//# sourceMappingURL=EntityQueryContext-test.js.map