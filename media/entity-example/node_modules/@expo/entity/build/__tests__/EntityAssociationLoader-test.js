"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const results_1 = require("@expo/results");
const uuid_1 = require("uuid");
const EntityAssociationLoader_1 = __importDefault(require("../EntityAssociationLoader"));
const entityUtils_1 = require("../entityUtils");
const TestEntity_1 = __importDefault(require("../testfixtures/TestEntity"));
const TestEntity2_1 = __importDefault(require("../testfixtures/TestEntity2"));
const TestViewerContext_1 = __importDefault(require("../testfixtures/TestViewerContext"));
const createUnitTestEntityCompanionProvider_1 = require("../utils/testing/createUnitTestEntityCompanionProvider");
describe(EntityAssociationLoader_1.default, () => {
    describe('loadAssociatedEntityAsync', () => {
        it('loads associated entities by ID and correctly handles a null value', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testOtherEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).createAsync());
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext)
                .setField('stringField', testOtherEntity.getID())
                .createAsync());
            const loadedOther = await (0, results_1.enforceAsyncResult)(testEntity.associationLoader().loadAssociatedEntityAsync('stringField', TestEntity_1.default));
            expect(loadedOther.getID()).toEqual(testOtherEntity.getID());
            const loadedOther2 = await (0, results_1.enforceAsyncResult)(testEntity.associationLoader().loadAssociatedEntityAsync('nullableField', TestEntity_1.default));
            expect(loadedOther2).toBeNull();
        });
    });
    describe('loadManyAssociatedEntitiesAsync', () => {
        it('loads many associated entities referencing this entity', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).createAsync());
            const testOtherEntity1 = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('stringField', testEntity.getID()).createAsync());
            const testOtherEntity2 = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('stringField', testEntity.getID()).createAsync());
            const loaded = await (0, entityUtils_1.enforceResultsAsync)(testEntity.associationLoader().loadManyAssociatedEntitiesAsync(TestEntity_1.default, 'stringField'));
            expect(loaded).toHaveLength(2);
            expect(loaded.find((e) => e.getID() === testOtherEntity1.getID())).not.toBeUndefined();
            expect(loaded.find((e) => e.getID() === testOtherEntity2.getID())).not.toBeUndefined();
        });
    });
    describe('loadAssociatedEntityByFieldEqualingAsync', () => {
        it('loads associated entity by field equaling', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testOtherEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).createAsync());
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext)
                .setField('stringField', testOtherEntity.getID())
                .createAsync());
            const loadedOtherResult = await testEntity
                .associationLoader()
                .loadAssociatedEntityByFieldEqualingAsync('stringField', TestEntity_1.default, 'customIdField');
            expect(loadedOtherResult?.enforceValue().getID()).toEqual(testOtherEntity.getID());
        });
        it('returns null when loading associated entities by field equaling a non existent association', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('stringField', (0, uuid_1.v4)()).createAsync());
            const loadedOtherResult = await testEntity
                .associationLoader()
                .loadAssociatedEntityByFieldEqualingAsync('stringField', TestEntity_1.default, 'customIdField');
            expect(loadedOtherResult).toBeNull();
        });
        it('returns null when load-by field is null', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('stringField', 'blah').createAsync());
            const loadedOtherResult = await testEntity
                .associationLoader()
                .loadAssociatedEntityByFieldEqualingAsync('nullableField', TestEntity_1.default, 'customIdField');
            expect(loadedOtherResult).toBeNull();
        });
    });
    describe('loadManyAssociatedEntitiesByFieldEqualingAsync', () => {
        it('loads many associated entities by field equaling', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).createAsync());
            const testOtherEntity1 = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('stringField', testEntity.getID()).createAsync());
            const testOtherEntity2 = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('stringField', testEntity.getID()).createAsync());
            const loaded = await (0, entityUtils_1.enforceResultsAsync)(testEntity
                .associationLoader()
                .loadManyAssociatedEntitiesByFieldEqualingAsync('customIdField', TestEntity_1.default, 'stringField'));
            expect(loaded).toHaveLength(2);
            expect(loaded.find((e) => e.getID() === testOtherEntity1.getID())).not.toBeUndefined();
            expect(loaded.find((e) => e.getID() === testOtherEntity2.getID())).not.toBeUndefined();
        });
        it('returns empty results when field being queried by is null', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).createAsync());
            const loaded = await (0, entityUtils_1.enforceResultsAsync)(testEntity
                .associationLoader()
                .loadManyAssociatedEntitiesByFieldEqualingAsync('nullableField', TestEntity_1.default, 'stringField'));
            expect(loaded).toHaveLength(0);
        });
    });
    describe('loadAssociatedEntityThroughAsync', () => {
        it('chain loads associated entities', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity4 = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).createAsync());
            const testEntity3 = await (0, results_1.enforceAsyncResult)(TestEntity2_1.default.creator(viewerContext)
                .setField('foreignKey', testEntity4.getID())
                .createAsync());
            const testEntity2 = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext)
                .setField('testIndexedField', testEntity3.getID())
                .createAsync());
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity2_1.default.creator(viewerContext)
                .setField('foreignKey', testEntity2.getID())
                .createAsync());
            const loaded2Result = await testEntity.associationLoader().loadAssociatedEntityThroughAsync([
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'foreignKey',
                },
            ]);
            expect(loaded2Result?.enforceValue().getID()).toEqual(testEntity2.getID());
            const loaded3Result = await testEntity.associationLoader().loadAssociatedEntityThroughAsync([
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'foreignKey',
                },
                {
                    associatedEntityClass: TestEntity2_1.default,
                    fieldIdentifyingAssociatedEntity: 'testIndexedField',
                },
            ]);
            expect(loaded3Result?.enforceValue().getID()).toEqual(testEntity3.getID());
            const loaded4Result = await testEntity.associationLoader().loadAssociatedEntityThroughAsync([
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'foreignKey',
                },
                {
                    associatedEntityClass: TestEntity2_1.default,
                    fieldIdentifyingAssociatedEntity: 'testIndexedField',
                },
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'foreignKey',
                },
            ]);
            expect(loaded4Result?.enforceValue().getID()).toEqual(testEntity4.getID());
        });
        it('fails when chain loading associated entity fails', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity2_1.default.creator(viewerContext).setField('foreignKey', (0, uuid_1.v4)()).createAsync());
            const loadResult = await testEntity.associationLoader().loadAssociatedEntityThroughAsync([
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'foreignKey',
                },
            ]);
            expect(loadResult?.ok).toBe(false);
        });
        it('supports chain loading by field equality', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const fieldValue = (0, uuid_1.v4)();
            const testEntity2 = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('stringField', fieldValue).createAsync());
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity2_1.default.creator(viewerContext).setField('foreignKey', fieldValue).createAsync());
            const loaded2Result = await testEntity.associationLoader().loadAssociatedEntityThroughAsync([
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'foreignKey',
                    associatedEntityLookupByField: 'stringField',
                },
            ]);
            expect(loaded2Result?.enforceValue().getID()).toEqual(testEntity2.getID());
        });
        it('returns null when chain loading by field equality returns null', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity2_1.default.creator(viewerContext).setField('foreignKey', (0, uuid_1.v4)()).createAsync());
            const loaded2Result = await testEntity.associationLoader().loadAssociatedEntityThroughAsync([
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'foreignKey',
                    associatedEntityLookupByField: 'stringField',
                },
            ]);
            expect(loaded2Result).toBeNull();
        });
        it('returns null when chain loading by field is null', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new TestViewerContext_1.default(companionProvider);
            const testEntity = await (0, results_1.enforceAsyncResult)(TestEntity_1.default.creator(viewerContext).setField('nullableField', null).createAsync());
            const loadedResult = await testEntity.associationLoader().loadAssociatedEntityThroughAsync([
                {
                    associatedEntityClass: TestEntity_1.default,
                    fieldIdentifyingAssociatedEntity: 'nullableField',
                },
            ]);
            expect(loadedResult).toBeNull();
        });
    });
});
//# sourceMappingURL=EntityAssociationLoader-test.js.map