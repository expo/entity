"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts_mockito_1 = require("ts-mockito");
const EntityCompanion_1 = __importDefault(require("../EntityCompanion"));
const EntityCompanionProvider_1 = __importDefault(require("../EntityCompanionProvider"));
const EntityLoaderFactory_1 = __importDefault(require("../EntityLoaderFactory"));
const EntityMutatorFactory_1 = __importDefault(require("../EntityMutatorFactory"));
const NoOpEntityMetricsAdapter_1 = __importDefault(require("../metrics/NoOpEntityMetricsAdapter"));
const TestEntityWithMutationTriggers_1 = __importStar(require("../testfixtures/TestEntityWithMutationTriggers"));
describe(EntityCompanion_1.default, () => {
    it('correctly instantiates mutator and loader factories', () => {
        const entityCompanionProvider = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)());
        const tableDataCoordinatorMock = (0, ts_mockito_1.mock)();
        (0, ts_mockito_1.when)(tableDataCoordinatorMock.entityConfiguration).thenReturn(TestEntityWithMutationTriggers_1.testEntityMTConfiguration);
        const companion = new EntityCompanion_1.default(entityCompanionProvider, TestEntityWithMutationTriggers_1.default.defineCompanionDefinition(), (0, ts_mockito_1.instance)(tableDataCoordinatorMock), (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)()));
        expect(companion.getLoaderFactory()).toBeInstanceOf(EntityLoaderFactory_1.default);
        expect(companion.getMutatorFactory()).toBeInstanceOf(EntityMutatorFactory_1.default);
    });
    it('correctly merges local and global mutation triggers', () => {
        const globalMutationTriggers = {
            afterCreate: [new TestEntityWithMutationTriggers_1.TestMutationTrigger('globalAfterCreate')],
            afterAll: [new TestEntityWithMutationTriggers_1.TestMutationTrigger('globalAfterAll')],
        };
        const metricsAdapter = new NoOpEntityMetricsAdapter_1.default();
        const entityCompanionProvider = new EntityCompanionProvider_1.default(metricsAdapter, new Map(), new Map(), globalMutationTriggers);
        const tableDataCoordinatorMock = (0, ts_mockito_1.mock)();
        (0, ts_mockito_1.when)(tableDataCoordinatorMock.entityConfiguration).thenReturn(TestEntityWithMutationTriggers_1.testEntityMTConfiguration);
        const companion = new EntityCompanion_1.default(entityCompanionProvider, TestEntityWithMutationTriggers_1.default.defineCompanionDefinition(), (0, ts_mockito_1.instance)(tableDataCoordinatorMock), (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)()));
        expect(companion.getLoaderFactory()).toBeInstanceOf(EntityLoaderFactory_1.default);
        expect(companion.getMutatorFactory()).toBeInstanceOf(EntityMutatorFactory_1.default);
        const mergedTriggers = companion.getMutatorFactory()['mutationTriggers'];
        const localTriggers = companion.entityCompanionDefinition.mutationTriggers;
        expect(localTriggers).toBeTruthy();
        expect(mergedTriggers).toStrictEqual({
            afterCreate: [localTriggers.afterCreate[0], globalMutationTriggers.afterCreate[0]],
            afterAll: [localTriggers.afterAll[0], globalMutationTriggers.afterAll[0]],
            afterCommit: [localTriggers.afterCommit[0]],
        });
    });
});
//# sourceMappingURL=EntityCompanion-test.js.map