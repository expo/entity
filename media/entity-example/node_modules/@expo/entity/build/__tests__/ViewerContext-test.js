"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const EntityQueryContext_1 = require("../EntityQueryContext");
const ViewerContext_1 = __importDefault(require("../ViewerContext"));
const createUnitTestEntityCompanionProvider_1 = require("../utils/testing/createUnitTestEntityCompanionProvider");
describe(ViewerContext_1.default, () => {
    describe('getQueryContextForDatabaseAdaptorFlavor', () => {
        it('creates a new regular query context', () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            const queryContext = viewerContext.getQueryContextForDatabaseAdaptorFlavor('postgres');
            expect(queryContext).toBeInstanceOf(EntityQueryContext_1.EntityQueryContext);
            expect(queryContext.isInTransaction()).toBe(false);
        });
    });
    describe('runInTransactionForDatabaseAdaptorFlavorAsync', () => {
        it('creates a new transactional query context', async () => {
            const companionProvider = (0, createUnitTestEntityCompanionProvider_1.createUnitTestEntityCompanionProvider)();
            const viewerContext = new ViewerContext_1.default(companionProvider);
            const didCreateTransaction = await viewerContext.runInTransactionForDatabaseAdaptorFlavorAsync('postgres', async (queryContext) => {
                return queryContext.isInTransaction();
            });
            expect(didCreateTransaction).toBe(true);
        });
    });
});
//# sourceMappingURL=ViewerContext-test.js.map