"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const EntityConfiguration_1 = __importDefault(require("../EntityConfiguration"));
const EntityFields_1 = require("../EntityFields");
describe(EntityConfiguration_1.default, () => {
    describe('when valid', () => {
        const blahEntityConfiguration = new EntityConfiguration_1.default({
            idField: 'id',
            tableName: 'blah_table',
            schema: {
                id: new EntityFields_1.UUIDField({
                    columnName: 'id',
                }),
                cacheable: new EntityFields_1.StringField({
                    columnName: 'cacheable',
                    cache: true,
                }),
                uniqueButNotCacheable: new EntityFields_1.StringField({
                    columnName: 'unique_but_not_cacheable',
                }),
            },
            databaseAdapterFlavor: 'postgres',
            cacheAdapterFlavor: 'redis',
        });
        it('returns correct fields', () => {
            expect(blahEntityConfiguration.idField).toEqual('id');
            expect(blahEntityConfiguration.tableName).toEqual('blah_table');
            expect(blahEntityConfiguration.databaseAdapterFlavor).toEqual('postgres');
            expect(blahEntityConfiguration.cacheAdapterFlavor).toEqual('redis');
        });
        it('filters cacheable fields', () => {
            expect(blahEntityConfiguration.cacheableKeys).toEqual(new Set(['cacheable']));
        });
        describe('cache key version', () => {
            it('defaults to 0', () => {
                const entityConfiguration = new EntityConfiguration_1.default({
                    idField: 'id',
                    tableName: 'blah',
                    schema: {
                        id: new EntityFields_1.UUIDField({
                            columnName: 'id',
                        }),
                    },
                    databaseAdapterFlavor: 'postgres',
                    cacheAdapterFlavor: 'redis',
                });
                expect(entityConfiguration.cacheKeyVersion).toEqual(0);
            });
            it('sets to custom version', () => {
                const entityConfiguration = new EntityConfiguration_1.default({
                    idField: 'id',
                    tableName: 'blah',
                    schema: {
                        id: new EntityFields_1.UUIDField({
                            columnName: 'id',
                        }),
                    },
                    databaseAdapterFlavor: 'postgres',
                    cacheAdapterFlavor: 'redis',
                    cacheKeyVersion: 100,
                });
                expect(entityConfiguration.cacheKeyVersion).toEqual(100);
            });
        });
    });
    describe('validation', () => {
        describe('disallows keys of JS Object prototype for safety', () => {
            test.each([
                'constructor',
                '__defineGetter__',
                '__defineSetter__',
                'hasOwnProperty',
                '__lookupGetter__',
                '__lookupSetter__',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'toString',
                'valueOf',
                '__proto__',
                'toLocaleString',
            ])('disallows %p as field key', (keyName) => {
                expect(() => new EntityConfiguration_1.default({
                    idField: 'id',
                    tableName: 'blah_table',
                    schema: {
                        id: new EntityFields_1.UUIDField({
                            columnName: 'id',
                        }),
                        [keyName]: new EntityFields_1.StringField({
                            columnName: 'any',
                        }),
                    },
                    databaseAdapterFlavor: 'postgres',
                    cacheAdapterFlavor: 'redis',
                })).toThrow(`Entity field name not allowed to prevent conflicts with standard Object prototype fields: ${keyName}`);
            });
        });
    });
});
//# sourceMappingURL=EntityConfiguration-test.js.map