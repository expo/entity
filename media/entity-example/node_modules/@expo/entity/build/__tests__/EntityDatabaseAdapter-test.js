"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts_mockito_1 = require("ts-mockito");
const EntityDatabaseAdapter_1 = __importDefault(require("../EntityDatabaseAdapter"));
const EntityQueryContext_1 = require("../EntityQueryContext");
const TestEntity_1 = require("../testfixtures/TestEntity");
class TestEntityDatabaseAdapter extends EntityDatabaseAdapter_1.default {
    fetchResults;
    insertResults;
    updateResults;
    fetchEqualityConditionResults;
    fetchRawWhereResults;
    deleteCount;
    constructor({ fetchResults = [], insertResults = [], updateResults = [], fetchEqualityConditionResults = [], fetchRawWhereResults = [], deleteCount = 0, }) {
        super(TestEntity_1.testEntityConfiguration);
        this.fetchResults = fetchResults;
        this.insertResults = insertResults;
        this.updateResults = updateResults;
        this.fetchEqualityConditionResults = fetchEqualityConditionResults;
        this.fetchRawWhereResults = fetchRawWhereResults;
        this.deleteCount = deleteCount;
    }
    getFieldTransformerMap() {
        return new Map();
    }
    async fetchManyWhereInternalAsync(_queryInterface, _tableName, _tableField, _tableValues) {
        return this.fetchResults;
    }
    async fetchManyByRawWhereClauseInternalAsync(_queryInterface, _tableName, _rawWhereClause, _bindings) {
        return this.fetchRawWhereResults;
    }
    async fetchManyByFieldEqualityConjunctionInternalAsync(_queryInterface, _tableName, _tableFieldSingleValueEqualityOperands, _tableFieldMultiValueEqualityOperands) {
        return this.fetchEqualityConditionResults;
    }
    async insertInternalAsync(_queryInterface, _tableName, _object) {
        return this.insertResults;
    }
    async updateInternalAsync(_queryInterface, _tableName, _tableIdField, _id, _object) {
        return this.updateResults;
    }
    async deleteInternalAsync(_queryInterface, _tableName, _tableIdField, _id) {
        return this.deleteCount;
    }
}
describe(EntityDatabaseAdapter_1.default, () => {
    describe('fetchManyWhereAsync', () => {
        it('transforms object', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({ fetchResults: [{ string_field: 'hello' }] });
            const result = await adapter.fetchManyWhereAsync(queryContext, 'stringField', ['hello']);
            expect(result.get('hello')).toEqual([{ stringField: 'hello' }]);
        });
        it('returns objects keyed by queried values', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({
                fetchResults: [{ string_field: 'hello' }, { string_field: 'wat' }],
            });
            const result = await adapter.fetchManyWhereAsync(queryContext, 'stringField', [
                'hello',
                'wat',
            ]);
            expect(result.get('hello')).toEqual([{ stringField: 'hello' }]);
            expect(result.get('wat')).toEqual([{ stringField: 'wat' }]);
        });
        it('returns map with all keys even when no results are returned', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({});
            const result = await adapter.fetchManyWhereAsync(queryContext, 'stringField', [
                'what',
                'who',
            ]);
            expect(Array.from(result.keys())).toEqual(['what', 'who']);
        });
    });
    describe('fetchManyByFieldEqualityConjunction', () => {
        it('transforms object', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({
                fetchEqualityConditionResults: [{ string_field: 'hello' }],
            });
            const results = await adapter.fetchManyByFieldEqualityConjunctionAsync(queryContext, [], {});
            expect(results).toEqual([{ stringField: 'hello' }]);
        });
    });
    describe('fetchManyWithRawWhereClause', () => {
        it('transforms object', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({
                fetchRawWhereResults: [{ string_field: 'hello' }],
            });
            const results = await adapter.fetchManyByRawWhereClauseAsync(queryContext, 'hello', [], {});
            expect(results).toEqual([{ stringField: 'hello' }]);
        });
    });
    describe('insertAsync', () => {
        it('transforms object', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({ insertResults: [{ string_field: 'hello' }] });
            const result = await adapter.insertAsync(queryContext, {});
            expect(result).toEqual({ stringField: 'hello' });
        });
        it('throws when insert result count zero', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({ insertResults: [] });
            await expect(adapter.insertAsync(queryContext, {})).rejects.toThrowError('Empty results from database adapter insert');
        });
        it('throws when insert result count greater than 1', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({
                insertResults: [{ string_field: 'hello' }, { string_field: 'hello2' }],
            });
            await expect(adapter.insertAsync(queryContext, {})).rejects.toThrowError('Excessive results from database adapter insert');
        });
    });
    describe('updateAsync', () => {
        it('transforms object', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({ updateResults: [{ string_field: 'hello' }] });
            const result = await adapter.updateAsync(queryContext, 'customIdField', 'wat', {});
            expect(result).toEqual({ stringField: 'hello' });
        });
        it('throws when update result count zero', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({ updateResults: [] });
            await expect(adapter.updateAsync(queryContext, 'customIdField', 'wat', {})).rejects.toThrowError('Empty results from database adapter update');
        });
        it('throws when update result count greater than 1', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({
                updateResults: [{ string_field: 'hello' }, { string_field: 'hello2' }],
            });
            await expect(adapter.updateAsync(queryContext, 'customIdField', 'wat', {})).rejects.toThrowError('Excessive results from database adapter update');
        });
    });
    describe('deleteAsync', () => {
        it('throws when update result count greater than 1', async () => {
            const queryContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(EntityQueryContext_1.EntityQueryContext));
            const adapter = new TestEntityDatabaseAdapter({ deleteCount: 2 });
            await expect(adapter.deleteAsync(queryContext, 'customIdField', 'wat')).rejects.toThrowError('Excessive deletions from database adapter delet');
        });
    });
});
//# sourceMappingURL=EntityDatabaseAdapter-test.js.map