"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const EntityFieldDefinition_1 = require("../EntityFieldDefinition");
const EntityFields_1 = require("../EntityFields");
const describeFieldTestCase_1 = __importDefault(require("../utils/testing/describeFieldTestCase"));
class TestFieldDefinition extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return value === 'helloworld';
    }
}
describe(EntityFieldDefinition_1.EntityFieldDefinition, () => {
    it('returns correct column name and defaults cache to false', () => {
        const fieldDefinition1 = new TestFieldDefinition({ columnName: 'wat' });
        expect(fieldDefinition1.columnName).toEqual('wat');
        expect(fieldDefinition1.cache).toEqual(false);
        const fieldDefinition2 = new TestFieldDefinition({ columnName: 'wat', cache: true });
        expect(fieldDefinition2.columnName).toEqual('wat');
        expect(fieldDefinition2.cache).toEqual(true);
    });
    test('validator returns true when value is null', () => {
        const fieldDefinition = new TestFieldDefinition({ columnName: 'wat', cache: true });
        expect(fieldDefinition.validateInputValue(null)).toBe(true);
    });
    test('validator returns true when value is undefined', () => {
        const fieldDefinition = new TestFieldDefinition({ columnName: 'wat', cache: true });
        expect(fieldDefinition.validateInputValue(undefined)).toBe(true);
    });
    test('validator returns false when value is invalid', () => {
        const fieldDefinition = new TestFieldDefinition({ columnName: 'wat', cache: true });
        expect(fieldDefinition.validateInputValue('nothelloworld')).toBe(false);
    });
    test('validator returns true when value is valid', () => {
        const fieldDefinition = new TestFieldDefinition({ columnName: 'wat', cache: true });
        expect(fieldDefinition.validateInputValue('helloworld')).toBe(true);
    });
});
(0, describeFieldTestCase_1.default)(new EntityFields_1.StringField({ columnName: 'wat' }), ['hello', ''], [1, true, {}, [[]]]);
(0, describeFieldTestCase_1.default)(new EntityFields_1.UUIDField({ columnName: 'wat' }), [
    (0, uuid_1.v1)(),
    (0, uuid_1.v3)('wat', uuid_1.v3.DNS),
    (0, uuid_1.v4)(),
    (0, uuid_1.v5)('wat', uuid_1.v5.DNS),
    /* UUIDv7 */ '018ebfda-dc80-782d-a891-22a0aa057d52',
], [(0, uuid_1.v4)().replace('-', ''), '', 'hello']);
(0, describeFieldTestCase_1.default)(new EntityFields_1.DateField({ columnName: 'wat' }), [new Date()], [Date.now()]);
(0, describeFieldTestCase_1.default)(new EntityFields_1.BooleanField({ columnName: 'wat' }), [true, false], [0, 1, '']);
(0, describeFieldTestCase_1.default)(new EntityFields_1.IntField({ columnName: 'wat' }), [1], ['1', 0.5, true]);
(0, describeFieldTestCase_1.default)(new EntityFields_1.FloatField({ columnName: 'wat' }), [1, 0.5, -0.5], ['1']);
(0, describeFieldTestCase_1.default)(new EntityFields_1.StringArrayField({ columnName: 'wat' }), [[['what']], [[]]], // jest test cases need extra wrapping array
['hello']);
(0, describeFieldTestCase_1.default)(new EntityFields_1.JSONObjectField({ columnName: 'wat' }), [{}], [true, 'hello']);
(0, describeFieldTestCase_1.default)(new EntityFields_1.EnumField({ columnName: 'wat' }), ['hello', 1], [true]);
var TestEnum;
(function (TestEnum) {
    TestEnum["HELLO"] = "world";
    TestEnum["WHO"] = "wat";
})(TestEnum || (TestEnum = {}));
(0, describeFieldTestCase_1.default)(new EntityFields_1.StrictEnumField({ columnName: 'wat', enum: TestEnum }), [TestEnum.HELLO, TestEnum.WHO, 'world'], ['what', 1, true]);
//# sourceMappingURL=EntityFields-test.js.map