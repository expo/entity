import Entity from '../Entity';
import { EntityCompanionDefinition } from '../EntityCompanionProvider';
import EntityConfiguration from '../EntityConfiguration';
import EntityPrivacyPolicy from '../EntityPrivacyPolicy';
import ViewerContext from '../ViewerContext';
import AlwaysAllowPrivacyPolicyRule from '../rules/AlwaysAllowPrivacyPolicyRule';
export type TestFields = {
    id: string;
};
export type TestFieldSelection = keyof TestFields;
export declare const testEntityConfiguration: EntityConfiguration<TestFields>;
export declare class TestEntityPrivacyPolicy extends EntityPrivacyPolicy<TestFields, string, ViewerContext, TestEntity, TestFieldSelection> {
    protected readonly readRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, "id">[];
    protected readonly createRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, "id">[];
    protected readonly updateRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, "id">[];
    protected readonly deleteRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, "id">[];
}
export default class TestEntity extends Entity<TestFields, string, ViewerContext, TestFieldSelection> {
    constructor(constructorParams: {
        viewerContext: ViewerContext;
        id: string;
        databaseFields: Readonly<TestFields>;
        selectedFields: Readonly<TestFields>;
    });
    static defineCompanionDefinition(): EntityCompanionDefinition<TestFields, string, ViewerContext, TestEntity, TestEntityPrivacyPolicy, TestFieldSelection>;
}
