"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestEntityPrivacyPolicy = exports.testEntityConfiguration = void 0;
const ts_mockito_1 = require("ts-mockito");
const Entity_1 = __importDefault(require("../Entity"));
const EntityConfiguration_1 = __importDefault(require("../EntityConfiguration"));
const EntityFields_1 = require("../EntityFields");
const EntityLoader_1 = __importDefault(require("../EntityLoader"));
const EntityPrivacyPolicy_1 = __importDefault(require("../EntityPrivacyPolicy"));
const ViewerContext_1 = __importDefault(require("../ViewerContext"));
const EntityDataManager_1 = __importDefault(require("../internal/EntityDataManager"));
const ReadThroughEntityCache_1 = __importDefault(require("../internal/ReadThroughEntityCache"));
const AlwaysAllowPrivacyPolicyRule_1 = __importDefault(require("../rules/AlwaysAllowPrivacyPolicyRule"));
const StubCacheAdapter_1 = require("../utils/testing/StubCacheAdapter");
const StubDatabaseAdapter_1 = __importDefault(require("../utils/testing/StubDatabaseAdapter"));
const StubQueryContextProvider_1 = __importDefault(require("../utils/testing/StubQueryContextProvider"));
exports.testEntityConfiguration = new EntityConfiguration_1.default({
    idField: 'id',
    tableName: 'test_entity_should_not_write_to_db',
    schema: {
        id: new EntityFields_1.StringField({
            columnName: 'id',
        }),
    },
    databaseAdapterFlavor: 'postgres',
    cacheAdapterFlavor: 'redis',
});
class TestEntityPrivacyPolicy extends EntityPrivacyPolicy_1.default {
    readRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    createRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    updateRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    deleteRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
}
exports.TestEntityPrivacyPolicy = TestEntityPrivacyPolicy;
const ID_SENTINEL_THROW_LITERAL = 'throw_literal';
const ID_SENTINEL_THROW_ERROR = 'throw_error';
class TestEntity extends Entity_1.default {
    constructor(constructorParams) {
        if (constructorParams.selectedFields.id === ID_SENTINEL_THROW_LITERAL) {
            // eslint-disable-next-line no-throw-literal,@typescript-eslint/no-throw-literal
            throw 'hello';
        }
        else if (constructorParams.selectedFields.id === ID_SENTINEL_THROW_ERROR) {
            throw new Error('world');
        }
        super(constructorParams);
    }
    static defineCompanionDefinition() {
        return {
            entityClass: TestEntity,
            entityConfiguration: exports.testEntityConfiguration,
            privacyPolicyClass: TestEntityPrivacyPolicy,
        };
    }
}
exports.default = TestEntity;
describe(EntityLoader_1.default, () => {
    it('handles thrown errors and literals from constructor', async () => {
        const viewerContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)(ViewerContext_1.default));
        const privacyPolicyEvaluationContext = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)());
        const metricsAdapter = (0, ts_mockito_1.instance)((0, ts_mockito_1.mock)());
        const queryContext = StubQueryContextProvider_1.default.getQueryContext();
        const databaseAdapter = new StubDatabaseAdapter_1.default(exports.testEntityConfiguration, StubDatabaseAdapter_1.default.convertFieldObjectsToDataStore(exports.testEntityConfiguration, new Map([
            [
                exports.testEntityConfiguration.tableName,
                [
                    {
                        id: ID_SENTINEL_THROW_LITERAL,
                    },
                    {
                        id: ID_SENTINEL_THROW_ERROR,
                    },
                ],
            ],
        ])));
        const privacyPolicy = new TestEntityPrivacyPolicy();
        const cacheAdapterProvider = new StubCacheAdapter_1.NoCacheStubCacheAdapterProvider();
        const cacheAdapter = cacheAdapterProvider.getCacheAdapter(exports.testEntityConfiguration);
        const entityCache = new ReadThroughEntityCache_1.default(exports.testEntityConfiguration, cacheAdapter);
        const dataManager = new EntityDataManager_1.default(databaseAdapter, entityCache, StubQueryContextProvider_1.default, metricsAdapter, TestEntity.name);
        const entityLoader = new EntityLoader_1.default(viewerContext, queryContext, privacyPolicyEvaluationContext, exports.testEntityConfiguration, TestEntity, 
        /* entitySelectedFields */ undefined, privacyPolicy, dataManager, metricsAdapter);
        let capturedThrownThing1;
        try {
            await entityLoader.withAuthorizationResults().loadByIDAsync(ID_SENTINEL_THROW_LITERAL);
        }
        catch (e) {
            capturedThrownThing1 = e;
        }
        expect(capturedThrownThing1).not.toBeInstanceOf(Error);
        expect(capturedThrownThing1).toEqual('hello');
        const result = await entityLoader
            .withAuthorizationResults()
            .loadByIDAsync(ID_SENTINEL_THROW_ERROR);
        expect(result.ok).toBe(false);
        expect(result.enforceError().message).toEqual('world');
    });
});
//# sourceMappingURL=EntityLoader-constructor-test.js.map