"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EntityMutator_1 = require("./EntityMutator");
/**
 * The primary interface for creating, mutating, and deleting entities.
 */
class EntityMutatorFactory {
    entityCompanionProvider;
    entityConfiguration;
    entityClass;
    privacyPolicy;
    mutationValidators;
    mutationTriggers;
    entityLoaderFactory;
    databaseAdapter;
    metricsAdapter;
    constructor(entityCompanionProvider, entityConfiguration, entityClass, privacyPolicy, mutationValidators, mutationTriggers, entityLoaderFactory, databaseAdapter, metricsAdapter) {
        this.entityCompanionProvider = entityCompanionProvider;
        this.entityConfiguration = entityConfiguration;
        this.entityClass = entityClass;
        this.privacyPolicy = privacyPolicy;
        this.mutationValidators = mutationValidators;
        this.mutationTriggers = mutationTriggers;
        this.entityLoaderFactory = entityLoaderFactory;
        this.databaseAdapter = databaseAdapter;
        this.metricsAdapter = metricsAdapter;
    }
    /**
     * Vend mutator for creating a new entity in given query context.
     * @param viewerContext - viewer context of creating user
     * @param queryContext - query context in which to perform the create
     * @returns mutator for creating an entity
     */
    forCreate(viewerContext, queryContext) {
        return new EntityMutator_1.CreateMutator(this.entityCompanionProvider, viewerContext, queryContext, this.entityConfiguration, this.entityClass, this.privacyPolicy, this.mutationValidators, this.mutationTriggers, this.entityLoaderFactory, this.databaseAdapter, this.metricsAdapter);
    }
    /**
     * Vend mutator for updating an existing entity in given query context.
     * @param existingEntity - entity to update
     * @param queryContext - query context in which to perform the update
     * @returns mutator for updating existingEntity
     */
    forUpdate(existingEntity, queryContext) {
        return new EntityMutator_1.UpdateMutator(this.entityCompanionProvider, existingEntity.getViewerContext(), queryContext, this.entityConfiguration, this.entityClass, this.privacyPolicy, this.mutationValidators, this.mutationTriggers, this.entityLoaderFactory, this.databaseAdapter, this.metricsAdapter, existingEntity);
    }
    /**
     * Delete an existing entity in given query context.
     * @param existingEntity - entity to delete
     * @param queryContext - query context in which to perform the delete
     */
    forDelete(existingEntity, queryContext) {
        return new EntityMutator_1.DeleteMutator(this.entityCompanionProvider, existingEntity.getViewerContext(), queryContext, this.entityConfiguration, this.entityClass, this.privacyPolicy, this.mutationValidators, this.mutationTriggers, this.entityLoaderFactory, this.databaseAdapter, this.metricsAdapter, existingEntity);
    }
}
exports.default = EntityMutatorFactory;
//# sourceMappingURL=EntityMutatorFactory.js.map