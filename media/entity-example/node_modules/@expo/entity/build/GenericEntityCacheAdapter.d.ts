import IEntityCacheAdapter from './IEntityCacheAdapter';
import IEntityGenericCacher from './IEntityGenericCacher';
import { CacheLoadResult } from './internal/ReadThroughEntityCache';
/**
 * A standard IEntityCacheAdapter that coordinates caching through an IEntityGenericCacher.
 */
export default class GenericEntityCacheAdapter<TFields> implements IEntityCacheAdapter<TFields> {
    private readonly genericCacher;
    constructor(genericCacher: IEntityGenericCacher<TFields>);
    loadManyAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<ReadonlyMap<NonNullable<TFields[N]>, CacheLoadResult<TFields>>>;
    cacheManyAsync<N extends keyof TFields>(fieldName: N, objectMap: ReadonlyMap<NonNullable<TFields[N]>, Readonly<TFields>>): Promise<void>;
    cacheDBMissesAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<void>;
    invalidateManyAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<void>;
}
