import { ISecondaryEntityCache } from './EntitySecondaryCacheLoader';
import IEntityGenericCacher from './IEntityGenericCacher';
/**
 * A custom secondary read-through entity cache is a way to add a custom second layer of caching for a particular
 * single entity load. One common way this may be used is to add a second layer of caching in a hot path that makes
 * a call to EntityLoader.loadManyByFieldEqualityConjunctionAsync is guaranteed to return at most one entity.
 */
export default abstract class GenericSecondaryEntityCache<TFields, TLoadParams> implements ISecondaryEntityCache<TFields, TLoadParams> {
    protected readonly cacher: IEntityGenericCacher<TFields>;
    protected readonly constructCacheKey: (params: Readonly<TLoadParams>) => string;
    constructor(cacher: IEntityGenericCacher<TFields>, constructCacheKey: (params: Readonly<TLoadParams>) => string);
    loadManyThroughAsync(loadParamsArray: readonly Readonly<TLoadParams>[], fetcher: (fetcherLoadParamsArray: readonly Readonly<TLoadParams>[]) => Promise<ReadonlyMap<Readonly<TLoadParams>, Readonly<TFields> | null>>): Promise<ReadonlyMap<Readonly<TLoadParams>, Readonly<TFields> | null>>;
    /**
     * Invalidate the cache for objects cached by constructCacheKey(loadParams).
     *
     * @param loadParamsArray - load params to invalidate
     */
    invalidateManyAsync(loadParamsArray: readonly Readonly<TLoadParams>[]): Promise<void>;
}
