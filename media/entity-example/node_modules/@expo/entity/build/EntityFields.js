"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StrictEnumField = exports.EnumField = exports.JSONObjectField = exports.StringArrayField = exports.FloatField = exports.IntField = exports.BooleanField = exports.DateField = exports.UUIDField = exports.StringField = void 0;
const EntityFieldDefinition_1 = require("./EntityFieldDefinition");
// Use our own regex since the `uuid` package doesn't support validating UUIDv6/7/8 yet
const UUID_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;
/**
 * EntityFieldDefinition for a column with a JS string type.
 */
class StringField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return typeof value === 'string';
    }
}
exports.StringField = StringField;
/**
 * EntityFieldDefinition for a column with a JS string type.
 * Enforces that the string is a valid UUID.
 */
class UUIDField extends StringField {
    validateInputValueInternal(value) {
        return super.validateInputValueInternal(value) && UUID_REGEX.test(value);
    }
}
exports.UUIDField = UUIDField;
/**
 * EntityFieldDefinition for a column with a JS Date type.
 */
class DateField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return value instanceof Date;
    }
}
exports.DateField = DateField;
/**
 * EntityFieldDefinition for a column with a JS boolean type.
 */
class BooleanField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return typeof value === 'boolean';
    }
}
exports.BooleanField = BooleanField;
/**
 * EntityFieldDefinition for a column with a JS number type.
 * Enforces that the number is an integer.
 */
class IntField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return typeof value === 'number' && Number.isInteger(value);
    }
}
exports.IntField = IntField;
/**
 * EntityFieldDefinition for a column with a JS number type.
 * Enforces that the number is a float (which includes integers in JS).
 */
class FloatField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return typeof value === 'number';
    }
}
exports.FloatField = FloatField;
/**
 * EntityFieldDefinition for a column with a JS string array type.
 * Enforces that every member of the string array is a string.
 */
class StringArrayField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return Array.isArray(value) && value.every((subValue) => typeof subValue === 'string');
    }
}
exports.StringArrayField = StringArrayField;
/**
 * EntityFieldDefinition for a column with a JS JSON object type.
 */
class JSONObjectField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return typeof value === 'object' && !Array.isArray(value);
    }
}
exports.JSONObjectField = JSONObjectField;
/**
 * EntityFieldDefinition for a enum column with a JS string or number type.
 */
class EnumField extends EntityFieldDefinition_1.EntityFieldDefinition {
    validateInputValueInternal(value) {
        return typeof value === 'number' || typeof value === 'string';
    }
}
exports.EnumField = EnumField;
/**
 * EntityFieldDefinition for a enum column with a strict typescript enum type.
 */
class StrictEnumField extends EnumField {
    enum;
    constructor(options) {
        super(options);
        this.enum = options.enum;
    }
    validateInputValueInternal(value) {
        return super.validateInputValueInternal(value) && Object.values(this.enum).includes(value);
    }
}
exports.StrictEnumField = StrictEnumField;
//# sourceMappingURL=EntityFields.js.map