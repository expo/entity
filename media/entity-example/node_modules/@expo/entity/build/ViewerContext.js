"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ViewerScopedEntityCompanionProvider_1 = __importDefault(require("./ViewerScopedEntityCompanionProvider"));
/**
 * A viewer context encapsulates all information necessary to evaluate an EntityPrivacyPolicy.
 *
 * In combination with an EntityCompanionProvider, a viewer context is the
 * entry point into the Entity framework.
 */
class ViewerContext {
    entityCompanionProvider;
    viewerScopedEntityCompanionProvider;
    constructor(entityCompanionProvider) {
        this.entityCompanionProvider = entityCompanionProvider;
        this.viewerScopedEntityCompanionProvider = new ViewerScopedEntityCompanionProvider_1.default(entityCompanionProvider, this);
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    getViewerScopedEntityCompanionForClass(entityClass) {
        return this.viewerScopedEntityCompanionProvider.getViewerScopedCompanionForEntity(entityClass);
    }
    /**
     * Get the regular (non-transactional) query context for a database adaptor flavor.
     * @param databaseAdaptorFlavor - database adaptor flavor
     */
    getQueryContextForDatabaseAdaptorFlavor(databaseAdaptorFlavor) {
        return this.entityCompanionProvider
            .getQueryContextProviderForDatabaseAdaptorFlavor(databaseAdaptorFlavor)
            .getQueryContext();
    }
    /**
     * Run a transaction of specified database adaptor flavor and execute the provided
     * transaction-scoped closure within the transaction.
     * @param databaseAdaptorFlavor - databaseAdaptorFlavor
     * @param transactionScope - async callback to execute within the transaction
     */
    async runInTransactionForDatabaseAdaptorFlavorAsync(databaseAdaptorFlavor, transactionScope, transactionConfig) {
        return await this.entityCompanionProvider
            .getQueryContextProviderForDatabaseAdaptorFlavor(databaseAdaptorFlavor)
            .getQueryContext()
            .runInTransactionIfNotInTransactionAsync(transactionScope, transactionConfig);
    }
}
exports.default = ViewerContext;
//# sourceMappingURL=ViewerContext.js.map