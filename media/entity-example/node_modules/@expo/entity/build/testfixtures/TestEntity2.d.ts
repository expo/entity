import Entity from '../Entity';
import { EntityCompanionDefinition } from '../EntityCompanionProvider';
import EntityConfiguration from '../EntityConfiguration';
import EntityPrivacyPolicy from '../EntityPrivacyPolicy';
import ViewerContext from '../ViewerContext';
import AlwaysAllowPrivacyPolicyRule from '../rules/AlwaysAllowPrivacyPolicyRule';
export type Test2Fields = {
    id: string;
    foreignKey: string;
};
export declare const testEntity2Configuration: EntityConfiguration<Test2Fields>;
export declare class TestEntity2PrivacyPolicy extends EntityPrivacyPolicy<Test2Fields, string, ViewerContext, TestEntity2> {
    protected readonly readRules: AlwaysAllowPrivacyPolicyRule<Test2Fields, string, ViewerContext, TestEntity2, keyof Test2Fields>[];
    protected readonly createRules: AlwaysAllowPrivacyPolicyRule<Test2Fields, string, ViewerContext, TestEntity2, keyof Test2Fields>[];
    protected readonly updateRules: AlwaysAllowPrivacyPolicyRule<Test2Fields, string, ViewerContext, TestEntity2, keyof Test2Fields>[];
    protected readonly deleteRules: AlwaysAllowPrivacyPolicyRule<Test2Fields, string, ViewerContext, TestEntity2, keyof Test2Fields>[];
}
export default class TestEntity2 extends Entity<Test2Fields, string, ViewerContext> {
    static defineCompanionDefinition(): EntityCompanionDefinition<Test2Fields, string, ViewerContext, TestEntity2, TestEntity2PrivacyPolicy>;
}
