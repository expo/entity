import { Result } from '@expo/results';
import Entity from '../Entity';
import { EntityCompanionDefinition } from '../EntityCompanionProvider';
import EntityConfiguration from '../EntityConfiguration';
import EntityPrivacyPolicy from '../EntityPrivacyPolicy';
import ViewerContext from '../ViewerContext';
import AlwaysAllowPrivacyPolicyRule from '../rules/AlwaysAllowPrivacyPolicyRule';
export type TestFields = {
    customIdField: string;
    testIndexedField: string;
    stringField: string;
    intField: number;
    dateField: Date;
    nullableField: string | null;
};
export declare const testEntityConfiguration: EntityConfiguration<TestFields>;
export declare class TestEntityPrivacyPolicy extends EntityPrivacyPolicy<TestFields, string, ViewerContext, TestEntity> {
    protected readonly readRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, keyof TestFields>[];
    protected readonly createRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, keyof TestFields>[];
    protected readonly updateRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, keyof TestFields>[];
    protected readonly deleteRules: AlwaysAllowPrivacyPolicyRule<TestFields, string, ViewerContext, TestEntity, keyof TestFields>[];
}
export default class TestEntity extends Entity<TestFields, string, ViewerContext> {
    static defineCompanionDefinition(): EntityCompanionDefinition<TestFields, string, ViewerContext, TestEntity, TestEntityPrivacyPolicy>;
    getBlah(): string;
    static helloAsync(viewerContext: ViewerContext, testValue: string): Promise<Result<TestEntity>>;
    static returnErrorAsync(_viewerContext: ViewerContext): Promise<Result<TestEntity>>;
    static throwErrorAsync(_viewerContext: ViewerContext): Promise<Result<TestEntity>>;
    static nonResultAsync(_viewerContext: ViewerContext, testValue: string): Promise<string>;
}
