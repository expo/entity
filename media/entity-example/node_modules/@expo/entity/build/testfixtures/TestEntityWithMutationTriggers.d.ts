import Entity from '../Entity';
import { EntityCompanionDefinition } from '../EntityCompanionProvider';
import EntityConfiguration from '../EntityConfiguration';
import { EntityTriggerMutationInfo } from '../EntityMutationInfo';
import { EntityMutationTrigger, EntityNonTransactionalMutationTrigger } from '../EntityMutationTriggerConfiguration';
import EntityPrivacyPolicy from '../EntityPrivacyPolicy';
import { EntityQueryContext } from '../EntityQueryContext';
import ViewerContext from '../ViewerContext';
import AlwaysAllowPrivacyPolicyRule from '../rules/AlwaysAllowPrivacyPolicyRule';
export type TestMTFields = {
    id: string;
    stringField: string;
};
export declare const testEntityMTConfiguration: EntityConfiguration<TestMTFields>;
export declare class TestEntityMTPrivacyPolicy extends EntityPrivacyPolicy<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers> {
    protected readonly readRules: AlwaysAllowPrivacyPolicyRule<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields>[];
    protected readonly createRules: AlwaysAllowPrivacyPolicyRule<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields>[];
    protected readonly updateRules: AlwaysAllowPrivacyPolicyRule<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields>[];
    protected readonly deleteRules: AlwaysAllowPrivacyPolicyRule<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields>[];
}
export declare class TestMutationTrigger extends EntityMutationTrigger<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields> {
    private readonly key;
    constructor(key: string);
    executeAsync(_viewerContext: ViewerContext, _queryContext: EntityQueryContext, _entity: TestEntityWithMutationTriggers, _mutationInfo: EntityTriggerMutationInfo<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields>): Promise<void>;
}
export declare class NonTransactionalTestMutationTrigger extends EntityNonTransactionalMutationTrigger<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields> {
    private readonly key;
    constructor(key: string);
    executeAsync(_viewerContext: ViewerContext, _entity: TestEntityWithMutationTriggers, _mutationInfo: EntityTriggerMutationInfo<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, keyof TestMTFields>): Promise<void>;
}
/**
 * A test Entity that has one afterCreate and one afterAll trigger
 */
export default class TestEntityWithMutationTriggers extends Entity<TestMTFields, string, ViewerContext> {
    static defineCompanionDefinition(): EntityCompanionDefinition<TestMTFields, string, ViewerContext, TestEntityWithMutationTriggers, TestEntityMTPrivacyPolicy>;
}
