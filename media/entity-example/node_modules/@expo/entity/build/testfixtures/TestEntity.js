"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestEntityPrivacyPolicy = exports.testEntityConfiguration = void 0;
const results_1 = require("@expo/results");
const Entity_1 = __importDefault(require("../Entity"));
const EntityConfiguration_1 = __importDefault(require("../EntityConfiguration"));
const EntityFields_1 = require("../EntityFields");
const EntityPrivacyPolicy_1 = __importDefault(require("../EntityPrivacyPolicy"));
const AlwaysAllowPrivacyPolicyRule_1 = __importDefault(require("../rules/AlwaysAllowPrivacyPolicyRule"));
exports.testEntityConfiguration = new EntityConfiguration_1.default({
    idField: 'customIdField',
    tableName: 'test_entity_should_not_write_to_db',
    schema: {
        customIdField: new EntityFields_1.UUIDField({
            columnName: 'custom_id',
        }),
        testIndexedField: new EntityFields_1.StringField({
            columnName: 'test_index',
            cache: true,
        }),
        stringField: new EntityFields_1.StringField({
            columnName: 'string_field',
        }),
        intField: new EntityFields_1.IntField({
            columnName: 'number_field',
        }),
        dateField: new EntityFields_1.DateField({
            columnName: 'date_field',
        }),
        nullableField: new EntityFields_1.StringField({
            columnName: 'nullable_field',
        }),
    },
    databaseAdapterFlavor: 'postgres',
    cacheAdapterFlavor: 'redis',
});
class TestEntityPrivacyPolicy extends EntityPrivacyPolicy_1.default {
    readRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    createRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    updateRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
    deleteRules = [
        new AlwaysAllowPrivacyPolicyRule_1.default(),
    ];
}
exports.TestEntityPrivacyPolicy = TestEntityPrivacyPolicy;
class TestEntity extends Entity_1.default {
    static defineCompanionDefinition() {
        return {
            entityClass: TestEntity,
            entityConfiguration: exports.testEntityConfiguration,
            privacyPolicyClass: TestEntityPrivacyPolicy,
        };
    }
    getBlah() {
        return 'Hello World!';
    }
    static async helloAsync(viewerContext, testValue) {
        const fields = {
            customIdField: testValue,
            testIndexedField: 'hello',
            stringField: 'hello',
            intField: 1,
            dateField: new Date(),
            nullableField: null,
        };
        return (0, results_1.result)(new TestEntity({
            viewerContext,
            id: testValue,
            databaseFields: fields,
            selectedFields: fields,
        }));
    }
    static async returnErrorAsync(_viewerContext) {
        return (0, results_1.result)(new Error('return entity'));
    }
    static async throwErrorAsync(_viewerContext) {
        throw new Error('threw entity');
    }
    static async nonResultAsync(_viewerContext, testValue) {
        return testValue;
    }
}
exports.default = TestEntity;
//# sourceMappingURL=TestEntity.js.map