"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const maps_1 = require("./utils/collections/maps");
/**
 * Enforcing entity loader. All normal loads are batched,
 * cached, and authorized against the entity's EntityPrivacyPolicy. All loads
 * through this loader will throw if the load is not successful.
 */
class EnforcingEntityLoader {
    entityLoader;
    constructor(entityLoader) {
        this.entityLoader = entityLoader;
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    async loadManyByFieldEqualingManyAsync(fieldName, fieldValues) {
        const fieldValuesToResults = await this.entityLoader.loadManyByFieldEqualingManyAsync(fieldName, fieldValues);
        return (0, maps_1.mapMap)(fieldValuesToResults, (results) => results.map((result) => result.enforceValue()));
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    async loadManyByFieldEqualingAsync(fieldName, fieldValue) {
        const entityResults = await this.entityLoader.loadManyByFieldEqualingAsync(fieldName, fieldValue);
        return entityResults.map((result) => result.enforceValue());
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view the returned entity
     * @throws when multiple entities are found matching the condition
     */
    async loadByFieldEqualingAsync(uniqueFieldName, fieldValue) {
        const entityResult = await this.entityLoader.loadByFieldEqualingAsync(uniqueFieldName, fieldValue);
        return entityResult ? entityResult.enforceValue() : null;
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view the returned entity
     */
    async loadByIDAsync(id) {
        const entityResult = await this.entityLoader.loadByIDAsync(id);
        return entityResult.enforceValue();
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view the returned entity
     * @throws when multiple entities are found matching the condition
     */
    async loadByIDNullableAsync(id) {
        const entityResult = await this.entityLoader.loadByIDNullableAsync(id);
        return entityResult ? entityResult.enforceValue() : null;
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    async loadManyByIDsAsync(ids) {
        const entityResults = await this.entityLoader.loadManyByIDsAsync(ids);
        return (0, maps_1.mapMap)(entityResults, (result) => result.enforceValue());
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    async loadManyByIDsNullableAsync(ids) {
        const entityResults = await this.entityLoader.loadManyByIDsNullableAsync(ids);
        return (0, maps_1.mapMap)(entityResults, (result) => result?.enforceValue() ?? null);
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    async loadFirstByFieldEqualityConjunctionAsync(fieldEqualityOperands, querySelectionModifiers) {
        const entityResult = await this.entityLoader.loadFirstByFieldEqualityConjunctionAsync(fieldEqualityOperands, querySelectionModifiers);
        return entityResult ? entityResult.enforceValue() : null;
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    async loadManyByFieldEqualityConjunctionAsync(fieldEqualityOperands, querySelectionModifiers = {}) {
        const entityResults = await this.entityLoader.loadManyByFieldEqualityConjunctionAsync(fieldEqualityOperands, querySelectionModifiers);
        return entityResults.map((result) => result.enforceValue());
    }
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    async loadManyByRawWhereClauseAsync(rawWhereClause, bindings, querySelectionModifiers = {}) {
        const entityResults = await this.entityLoader.loadManyByRawWhereClauseAsync(rawWhereClause, bindings, querySelectionModifiers);
        return entityResults.map((result) => result.enforceValue());
    }
}
exports.default = EnforcingEntityLoader;
//# sourceMappingURL=EnforcingEntityLoader.js.map