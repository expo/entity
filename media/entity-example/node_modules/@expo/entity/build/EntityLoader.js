"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AuthorizationResultBasedEntityLoader_1 = __importDefault(require("./AuthorizationResultBasedEntityLoader"));
const EnforcingEntityLoader_1 = __importDefault(require("./EnforcingEntityLoader"));
const EntityLoaderUtils_1 = __importDefault(require("./EntityLoaderUtils"));
/**
 * The primary interface for loading entities. All normal loads are batched,
 * cached, and authorized against the entity's EntityPrivacyPolicy.
 */
class EntityLoader {
    viewerContext;
    queryContext;
    privacyPolicyEvaluationContext;
    entityConfiguration;
    entityClass;
    entitySelectedFields;
    privacyPolicy;
    dataManager;
    metricsAdapter;
    utilsPrivate;
    constructor(viewerContext, queryContext, privacyPolicyEvaluationContext, entityConfiguration, entityClass, entitySelectedFields, privacyPolicy, dataManager, metricsAdapter) {
        this.viewerContext = viewerContext;
        this.queryContext = queryContext;
        this.privacyPolicyEvaluationContext = privacyPolicyEvaluationContext;
        this.entityConfiguration = entityConfiguration;
        this.entityClass = entityClass;
        this.entitySelectedFields = entitySelectedFields;
        this.privacyPolicy = privacyPolicy;
        this.dataManager = dataManager;
        this.metricsAdapter = metricsAdapter;
        this.utilsPrivate = new EntityLoaderUtils_1.default(this.viewerContext, this.queryContext, this.privacyPolicyEvaluationContext, this.entityConfiguration, this.entityClass, this.entitySelectedFields, this.privacyPolicy, this.dataManager, this.metricsAdapter);
    }
    /**
     * Enforcing entity loader. All loads through this loader are
     * guaranteed to be the values of successful results (or null for some loader methods),
     * and will throw otherwise.
     */
    enforcing() {
        return new EnforcingEntityLoader_1.default(this.withAuthorizationResults());
    }
    /**
     * Authorization-result-based entity loader. All loads through this
     * loader are are results (or null for some loader methods), where an unsuccessful result
     * means an authorization error or entity construction error occurred. Other errors are thrown.
     */
    withAuthorizationResults() {
        return new AuthorizationResultBasedEntityLoader_1.default(this.queryContext, this.entityConfiguration, this.entityClass, this.dataManager, this.metricsAdapter, this.utilsPrivate);
    }
    /**
     * Entity loader utilities for things like cache invalidation, entity construction, and authorization.
     * Calling into these should only be necessary in rare cases.
     */
    utils() {
        return this.utilsPrivate;
    }
}
exports.default = EntityLoader;
//# sourceMappingURL=EntityLoader.js.map