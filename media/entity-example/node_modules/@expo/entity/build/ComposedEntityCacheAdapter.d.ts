import IEntityCacheAdapter from './IEntityCacheAdapter';
import { CacheLoadResult } from './internal/ReadThroughEntityCache';
/**
 * A IEntityCacheAdapter that composes other IEntityCacheAdapter instances.
 */
export default class ComposedEntityCacheAdapter<TFields> implements IEntityCacheAdapter<TFields> {
    private readonly cacheAdapters;
    /**
     * @param cacheAdapters - list of cache adapters to compose in order of precedence.
     *                        Earlier cache adapters are read from first and written to (including invalidations) last.
     *                        Typically, caches closer to the application should be ordered before caches closer to the database.
     *                        A lower layer cache is closer to the database, while a higher layer cache is closer to the application.
     */
    constructor(cacheAdapters: IEntityCacheAdapter<TFields>[]);
    loadManyAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<ReadonlyMap<NonNullable<TFields[N]>, CacheLoadResult<TFields>>>;
    cacheManyAsync<N extends keyof TFields>(fieldName: N, objectMap: ReadonlyMap<NonNullable<TFields[N]>, Readonly<TFields>>): Promise<void>;
    cacheDBMissesAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<void>;
    invalidateManyAsync<N extends keyof TFields>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<void>;
}
