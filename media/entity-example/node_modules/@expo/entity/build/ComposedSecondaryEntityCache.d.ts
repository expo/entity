import { ISecondaryEntityCache } from './EntitySecondaryCacheLoader';
/**
 * A ISecondaryEntityCache that composes other ISecondaryEntityCache instances.
 */
export default class ComposedSecondaryEntityCache<TLoadParams, TFields> implements ISecondaryEntityCache<TFields, TLoadParams> {
    private readonly secondaryEntityCaches;
    /**
     * @param secondaryEntityCaches - list of caches to compose in order of precedence.
     *                                Earlier caches are read from first and written to (including invalidations) last.
     *                                Typically, caches closer to the application should be ordered before caches closer to the database.
     */
    constructor(secondaryEntityCaches: ISecondaryEntityCache<TFields, TLoadParams>[]);
    loadManyThroughAsync(loadParamsArray: readonly Readonly<TLoadParams>[], fetcher: (fetcherLoadParamsArray: readonly Readonly<TLoadParams>[]) => Promise<ReadonlyMap<Readonly<TLoadParams>, Readonly<TFields> | null>>): Promise<ReadonlyMap<Readonly<TLoadParams>, Readonly<TFields> | null>>;
    private static loadManyThroughRecursivelyAsync;
    invalidateManyAsync(loadParamsArray: readonly Readonly<TLoadParams>[]): Promise<void>;
}
