import AuthorizationResultBasedEntityLoader from './AuthorizationResultBasedEntityLoader';
import { FieldEqualityCondition, QuerySelectionModifiers, QuerySelectionModifiersWithOrderByRaw } from './EntityDatabaseAdapter';
import EntityPrivacyPolicy from './EntityPrivacyPolicy';
import ReadonlyEntity from './ReadonlyEntity';
import ViewerContext from './ViewerContext';
/**
 * Enforcing entity loader. All normal loads are batched,
 * cached, and authorized against the entity's EntityPrivacyPolicy. All loads
 * through this loader will throw if the load is not successful.
 */
export default class EnforcingEntityLoader<TFields extends object, TID extends NonNullable<TFields[TSelectedFields]>, TViewerContext extends ViewerContext, TEntity extends ReadonlyEntity<TFields, TID, TViewerContext, TSelectedFields>, TPrivacyPolicy extends EntityPrivacyPolicy<TFields, TID, TViewerContext, TEntity, TSelectedFields>, TSelectedFields extends keyof TFields> {
    private readonly entityLoader;
    constructor(entityLoader: AuthorizationResultBasedEntityLoader<TFields, TID, TViewerContext, TEntity, TPrivacyPolicy, TSelectedFields>);
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    loadManyByFieldEqualingManyAsync<N extends keyof Pick<TFields, TSelectedFields>>(fieldName: N, fieldValues: readonly NonNullable<TFields[N]>[]): Promise<ReadonlyMap<NonNullable<TFields[N]>, readonly TEntity[]>>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    loadManyByFieldEqualingAsync<N extends keyof Pick<TFields, TSelectedFields>>(fieldName: N, fieldValue: NonNullable<TFields[N]>): Promise<readonly TEntity[]>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view the returned entity
     * @throws when multiple entities are found matching the condition
     */
    loadByFieldEqualingAsync<N extends keyof Pick<TFields, TSelectedFields>>(uniqueFieldName: N, fieldValue: NonNullable<TFields[N]>): Promise<TEntity | null>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view the returned entity
     */
    loadByIDAsync(id: TID): Promise<TEntity>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view the returned entity
     * @throws when multiple entities are found matching the condition
     */
    loadByIDNullableAsync(id: TID): Promise<TEntity | null>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    loadManyByIDsAsync(ids: readonly TID[]): Promise<ReadonlyMap<TID, TEntity>>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    loadManyByIDsNullableAsync(ids: readonly TID[]): Promise<ReadonlyMap<TID, TEntity | null>>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    loadFirstByFieldEqualityConjunctionAsync<N extends keyof Pick<TFields, TSelectedFields>>(fieldEqualityOperands: FieldEqualityCondition<TFields, N>[], querySelectionModifiers: Omit<QuerySelectionModifiers<TFields>, 'limit'> & Required<Pick<QuerySelectionModifiers<TFields>, 'orderBy'>>): Promise<TEntity | null>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    loadManyByFieldEqualityConjunctionAsync<N extends keyof Pick<TFields, TSelectedFields>>(fieldEqualityOperands: FieldEqualityCondition<TFields, N>[], querySelectionModifiers?: QuerySelectionModifiers<TFields>): Promise<readonly TEntity[]>;
    /**
     * Enforcing version of entity loader method by the same name.
     * @throws EntityNotAuthorizedError when viewer is not authorized to view one or more of the returned entities
     */
    loadManyByRawWhereClauseAsync(rawWhereClause: string, bindings: any[] | object, querySelectionModifiers?: QuerySelectionModifiersWithOrderByRaw<TFields>): Promise<readonly TEntity[]>;
}
