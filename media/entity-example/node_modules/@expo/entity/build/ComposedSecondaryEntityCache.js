"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nullthrows_1 = __importDefault(require("nullthrows"));
/**
 * A ISecondaryEntityCache that composes other ISecondaryEntityCache instances.
 */
class ComposedSecondaryEntityCache {
    secondaryEntityCaches;
    /**
     * @param secondaryEntityCaches - list of caches to compose in order of precedence.
     *                                Earlier caches are read from first and written to (including invalidations) last.
     *                                Typically, caches closer to the application should be ordered before caches closer to the database.
     */
    constructor(secondaryEntityCaches) {
        this.secondaryEntityCaches = secondaryEntityCaches;
    }
    async loadManyThroughAsync(loadParamsArray, fetcher) {
        return await ComposedSecondaryEntityCache.loadManyThroughRecursivelyAsync(this.secondaryEntityCaches, loadParamsArray, fetcher);
    }
    static async loadManyThroughRecursivelyAsync(secondaryEntityCaches, loadParamsArray, fetcher) {
        if (secondaryEntityCaches.length === 0) {
            return await fetcher(loadParamsArray);
        }
        const [firstCache, ...restCaches] = secondaryEntityCaches;
        return await (0, nullthrows_1.default)(firstCache).loadManyThroughAsync(loadParamsArray, (fetcherLoadParamsArray) => ComposedSecondaryEntityCache.loadManyThroughRecursivelyAsync(restCaches, fetcherLoadParamsArray, fetcher));
    }
    async invalidateManyAsync(loadParamsArray) {
        // invalidate lower layers first
        for (let i = this.secondaryEntityCaches.length - 1; i >= 0; i--) {
            const secondaryEntityCache = (0, nullthrows_1.default)(this.secondaryEntityCaches[i]);
            await secondaryEntityCache.invalidateManyAsync(loadParamsArray);
        }
    }
}
exports.default = ComposedSecondaryEntityCache;
//# sourceMappingURL=ComposedSecondaryEntityCache.js.map