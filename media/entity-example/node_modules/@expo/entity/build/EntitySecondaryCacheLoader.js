"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const maps_1 = require("./utils/collections/maps");
/**
 * A secondary cache loader allows for arbitrary cache keying for load params, which are a set of params used to load
 * a single entity field object.
 *
 * Note that this cache cannot be automatically invalidated like other entity caches so it must be manually invalidated
 * when the underlying data of a cache key could be stale.
 *
 * This is most commonly used to further optimize hot paths that cannot make use of normal entity cache loading
 * due to use of a non-unique-field-based EntityLoader method like `loadManyByFieldEqualityConjunctionAsync` or
 * `loadManyByRawWhereClauseAsync`.
 */
class EntitySecondaryCacheLoader {
    secondaryEntityCache;
    entityLoader;
    constructor(secondaryEntityCache, entityLoader) {
        this.secondaryEntityCache = secondaryEntityCache;
        this.entityLoader = entityLoader;
    }
    /**
     * Load many by load params objects
     *
     * @param loadParamsArray - array of loadParams to load through the cache
     */
    async loadManyAsync(loadParamsArray) {
        const loadParamsToFieldObjects = await this.secondaryEntityCache.loadManyThroughAsync(loadParamsArray, this.fetchObjectsFromDatabaseAsync.bind(this));
        // convert value to and from array to reuse complex code
        const entitiesMap = await this.entityLoader
            .utils()
            .constructAndAuthorizeEntitiesAsync((0, maps_1.mapMap)(loadParamsToFieldObjects, (fieldObject) => (fieldObject ? [fieldObject] : [])));
        return (0, maps_1.mapMap)(entitiesMap, (fieldObjects) => fieldObjects[0] ?? null);
    }
    /**
     * Invalidate the cache for objects cached by loadParams.
     *
     * @param loadParamsArray - array of load params objects to invalidate
     */
    async invalidateManyAsync(loadParamsArray) {
        await this.secondaryEntityCache.invalidateManyAsync(loadParamsArray);
    }
}
exports.default = EntitySecondaryCacheLoader;
//# sourceMappingURL=EntitySecondaryCacheLoader.js.map