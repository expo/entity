"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const EntityLoaderFactory_1 = __importDefault(require("./EntityLoaderFactory"));
const EntityMutatorFactory_1 = __importDefault(require("./EntityMutatorFactory"));
const mergeEntityMutationTriggerConfigurations_1 = require("./utils/mergeEntityMutationTriggerConfigurations");
/**
 * Composition root responsible for orchestrating setup of Entity mutators and loaders.
 */
class EntityCompanion {
    entityCompanionProvider;
    entityCompanionDefinition;
    tableDataCoordinator;
    metricsAdapter;
    privacyPolicy;
    entityLoaderFactory;
    entityMutatorFactory;
    constructor(entityCompanionProvider, entityCompanionDefinition, tableDataCoordinator, metricsAdapter) {
        this.entityCompanionProvider = entityCompanionProvider;
        this.entityCompanionDefinition = entityCompanionDefinition;
        this.tableDataCoordinator = tableDataCoordinator;
        this.metricsAdapter = metricsAdapter;
        this.privacyPolicy = new entityCompanionDefinition.privacyPolicyClass();
        this.entityLoaderFactory = new EntityLoaderFactory_1.default(this, tableDataCoordinator.dataManager, metricsAdapter);
        this.entityMutatorFactory = new EntityMutatorFactory_1.default(entityCompanionProvider, tableDataCoordinator.entityConfiguration, entityCompanionDefinition.entityClass, this.privacyPolicy, entityCompanionDefinition.mutationValidators ?? [], (0, mergeEntityMutationTriggerConfigurations_1.mergeEntityMutationTriggerConfigurations)(entityCompanionDefinition.mutationTriggers ?? {}, entityCompanionProvider.globalMutationTriggers ?? {}), this.entityLoaderFactory, tableDataCoordinator.databaseAdapter, metricsAdapter);
    }
    getLoaderFactory() {
        return this.entityLoaderFactory;
    }
    getMutatorFactory() {
        return this.entityMutatorFactory;
    }
    /**
     * Get the query context provider for this entity.
     */
    getQueryContextProvider() {
        return this.tableDataCoordinator.getQueryContextProvider();
    }
    /**
     * Get the IEntityMetricsAdapter for this companion.
     */
    getMetricsAdapter() {
        return this.metricsAdapter;
    }
}
exports.default = EntityCompanion;
//# sourceMappingURL=EntityCompanion.js.map