import { Result } from '@expo/results';
import { IEntityClass } from './Entity';
import EntityConfiguration from './EntityConfiguration';
import EntityPrivacyPolicy, { EntityPrivacyPolicyEvaluationContext } from './EntityPrivacyPolicy';
import { EntityQueryContext } from './EntityQueryContext';
import ReadonlyEntity from './ReadonlyEntity';
import ViewerContext from './ViewerContext';
import EntityDataManager from './internal/EntityDataManager';
import IEntityMetricsAdapter from './metrics/IEntityMetricsAdapter';
/**
 * Entity loader utilities for things like invalidation, entity construction, and authorization.
 * Methods are exposed publicly since in rare cases they may need to be called manually.
 */
export default class EntityLoaderUtils<TFields extends object, TID extends NonNullable<TFields[TSelectedFields]>, TViewerContext extends ViewerContext, TEntity extends ReadonlyEntity<TFields, TID, TViewerContext, TSelectedFields>, TPrivacyPolicy extends EntityPrivacyPolicy<TFields, TID, TViewerContext, TEntity, TSelectedFields>, TSelectedFields extends keyof TFields> {
    private readonly viewerContext;
    private readonly queryContext;
    private readonly privacyPolicyEvaluationContext;
    private readonly entityConfiguration;
    private readonly entityClass;
    private readonly entitySelectedFields;
    private readonly privacyPolicy;
    private readonly dataManager;
    protected readonly metricsAdapter: IEntityMetricsAdapter;
    constructor(viewerContext: TViewerContext, queryContext: EntityQueryContext, privacyPolicyEvaluationContext: EntityPrivacyPolicyEvaluationContext<TFields, TID, TViewerContext, TEntity, TSelectedFields>, entityConfiguration: EntityConfiguration<TFields>, entityClass: IEntityClass<TFields, TID, TViewerContext, TEntity, TPrivacyPolicy, TSelectedFields>, entitySelectedFields: TSelectedFields[] | undefined, privacyPolicy: TPrivacyPolicy, dataManager: EntityDataManager<TFields>, metricsAdapter: IEntityMetricsAdapter);
    /**
     * Invalidate all caches for an entity's fields. Exposed primarily for internal use by EntityMutator.
     * @param objectFields - entity data object to be invalidated
     */
    invalidateFieldsAsync(objectFields: Readonly<TFields>): Promise<void>;
    /**
     * Invalidate all caches for an entity. One potential use case would be to keep the entity
     * framework in sync with changes made to data outside of the framework.
     * @param entity - entity to be invalidated
     */
    invalidateEntityAsync(entity: TEntity): Promise<void>;
    /**
     * Construct an entity from a fields object (applying field selection if applicable),
     * checking that the ID field is specified.
     *
     * @param fieldsObject - fields object
     */
    constructEntity(fieldsObject: TFields): TEntity;
    /**
     * Construct and authorize entities from fields map, returning error results for entities that fail
     * to construct or fail to authorize.
     *
     * @param map - map from an arbitrary key type to an array of entity field objects
     */
    constructAndAuthorizeEntitiesAsync<K>(map: ReadonlyMap<K, readonly Readonly<TFields>[]>): Promise<ReadonlyMap<K, readonly Result<TEntity>[]>>;
    /**
     * Construct and authorize entities from field objects array, returning error results for entities that fail
     * to construct or fail to authorize.
     *
     * @param fieldObjects - array of field objects
     */
    constructAndAuthorizeEntitiesArrayAsync(fieldObjects: readonly Readonly<TFields>[]): Promise<readonly Result<TEntity>[]>;
    private tryConstructEntities;
}
