"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EntityQueryContext_1 = require("./EntityQueryContext");
/**
 * A query context provider vends transactional and non-transactional query contexts.
 */
class EntityQueryContextProvider {
    /**
     * Vend a regular (non-transactional) entity query context.
     */
    getQueryContext() {
        return new EntityQueryContext_1.EntityNonTransactionalQueryContext(this.getQueryInterface(), this);
    }
    /**
     * Start a transaction and execute the provided transaction-scoped closure within the transaction.
     * @param transactionScope - async callback to execute within the transaction
     */
    async runInTransactionAsync(transactionScope, transactionConfig) {
        const [returnedValue, queryContext] = await this.createTransactionRunner(transactionConfig)(async (queryInterface) => {
            const queryContext = new EntityQueryContext_1.EntityTransactionalQueryContext(queryInterface, this);
            const result = await transactionScope(queryContext);
            await queryContext.runPreCommitCallbacksAsync();
            return [result, queryContext];
        });
        await queryContext.runPostCommitCallbacksAsync();
        return returnedValue;
    }
    /**
     * Start a nested transaction from the specified parent transaction and execure the
     * provided nested-transaction-scoped closure within the nested transaction.
     * @param outerQueryContext - the query context of the parent transaction
     * @param transactionScope - async callback to execute within the nested transaction
     */
    async runInNestedTransactionAsync(outerQueryContext, transactionScope) {
        const [returnedValue, innerQueryContext] = await this.createNestedTransactionRunner(outerQueryContext.getQueryInterface())(async (innerQueryInterface) => {
            const innerQueryContext = new EntityQueryContext_1.EntityNestedTransactionalQueryContext(innerQueryInterface, outerQueryContext, this);
            const result = await transactionScope(innerQueryContext);
            await innerQueryContext.runPreCommitCallbacksAsync();
            return [result, innerQueryContext];
        });
        // post-commit callbacks are appended to parent transaction instead of run, but only after the transaction has succeeded
        innerQueryContext.transferPostCommitCallbacksToParent();
        return returnedValue;
    }
}
exports.default = EntityQueryContextProvider;
//# sourceMappingURL=EntityQueryContextProvider.js.map