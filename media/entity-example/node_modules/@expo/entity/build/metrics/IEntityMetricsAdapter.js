"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityMetricsAuthorizationResult = exports.IncrementLoadCountEventType = exports.EntityMetricsMutationType = exports.EntityMetricsLoadType = void 0;
var EntityMetricsLoadType;
(function (EntityMetricsLoadType) {
    EntityMetricsLoadType[EntityMetricsLoadType["LOAD_MANY"] = 0] = "LOAD_MANY";
    EntityMetricsLoadType[EntityMetricsLoadType["LOAD_MANY_EQUALITY_CONJUNCTION"] = 1] = "LOAD_MANY_EQUALITY_CONJUNCTION";
    EntityMetricsLoadType[EntityMetricsLoadType["LOAD_MANY_RAW"] = 2] = "LOAD_MANY_RAW";
})(EntityMetricsLoadType || (exports.EntityMetricsLoadType = EntityMetricsLoadType = {}));
var EntityMetricsMutationType;
(function (EntityMetricsMutationType) {
    EntityMetricsMutationType[EntityMetricsMutationType["CREATE"] = 0] = "CREATE";
    EntityMetricsMutationType[EntityMetricsMutationType["UPDATE"] = 1] = "UPDATE";
    EntityMetricsMutationType[EntityMetricsMutationType["DELETE"] = 2] = "DELETE";
})(EntityMetricsMutationType || (exports.EntityMetricsMutationType = EntityMetricsMutationType = {}));
var IncrementLoadCountEventType;
(function (IncrementLoadCountEventType) {
    /**
     * Type for when a dataloader load is initiated via the standard load methods
     * since all loads go through a dataloader.
     */
    IncrementLoadCountEventType[IncrementLoadCountEventType["DATALOADER"] = 0] = "DATALOADER";
    /**
     * Type for when a cache load is initiated due to a dataloader miss.
     */
    IncrementLoadCountEventType[IncrementLoadCountEventType["CACHE"] = 1] = "CACHE";
    /**
     * Type for when a database load is initiated due to a dataloader and cache miss, when an entity query doesn't support caching, or during a transaction.
     */
    IncrementLoadCountEventType[IncrementLoadCountEventType["DATABASE"] = 2] = "DATABASE";
})(IncrementLoadCountEventType || (exports.IncrementLoadCountEventType = IncrementLoadCountEventType = {}));
var EntityMetricsAuthorizationResult;
(function (EntityMetricsAuthorizationResult) {
    EntityMetricsAuthorizationResult[EntityMetricsAuthorizationResult["DENY"] = 0] = "DENY";
    EntityMetricsAuthorizationResult[EntityMetricsAuthorizationResult["ALLOW"] = 1] = "ALLOW";
})(EntityMetricsAuthorizationResult || (exports.EntityMetricsAuthorizationResult = EntityMetricsAuthorizationResult = {}));
//# sourceMappingURL=IEntityMetricsAdapter.js.map