"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeAndLogMutationEventAsync = exports.timeAndLogLoadMapEventAsync = exports.timeAndLogLoadEventAsync = void 0;
const maps_1 = require("../utils/collections/maps");
const timeAndLogLoadEventAsync = (metricsAdapter, loadType, entityClassName) => async (promise) => {
    const startTime = Date.now();
    const result = await promise;
    const endTime = Date.now();
    metricsAdapter.logDataManagerLoadEvent({
        type: loadType,
        entityClassName,
        duration: endTime - startTime,
        count: result.length,
    });
    return result;
};
exports.timeAndLogLoadEventAsync = timeAndLogLoadEventAsync;
const timeAndLogLoadMapEventAsync = (metricsAdapter, loadType, entityClassName) => async (promise) => {
    const startTime = Date.now();
    const result = await promise;
    const endTime = Date.now();
    const count = (0, maps_1.reduceMap)(result, (acc, v) => acc + v.length, 0);
    metricsAdapter.logDataManagerLoadEvent({
        type: loadType,
        entityClassName,
        duration: endTime - startTime,
        count,
    });
    return result;
};
exports.timeAndLogLoadMapEventAsync = timeAndLogLoadMapEventAsync;
const timeAndLogMutationEventAsync = (metricsAdapter, mutationType, entityClassName) => async (promise) => {
    const startTime = Date.now();
    const result = await promise;
    const endTime = Date.now();
    metricsAdapter.logMutatorMutationEvent({
        type: mutationType,
        entityClassName,
        duration: endTime - startTime,
    });
    return result;
};
exports.timeAndLogMutationEventAsync = timeAndLogMutationEventAsync;
//# sourceMappingURL=EntityMetricsUtils.js.map