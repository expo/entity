import EntityConfiguration from '../EntityConfiguration';
export interface FieldTransformer<T> {
    /**
     * Transformation to apply when a value is read from an adapter.
     */
    read?: (value: any) => T | null;
    /**
     * Transformation to apply when a value is written to an adapter.
     */
    write?: (value: T | null) => any;
}
/**
 * Map from concrete EntityFieldDefinition implementation class name to field transformer.
 */
export type FieldTransformerMap = Map<string, FieldTransformer<any>>;
export declare const getDatabaseFieldForEntityField: <TFields extends Record<string, any>>(entityConfiguration: EntityConfiguration<TFields>, entityField: keyof TFields) => string;
export declare const transformDatabaseObjectToFields: <TFields extends Record<string, any>>(entityConfiguration: EntityConfiguration<TFields>, fieldTransformerMap: FieldTransformerMap, databaseObject: {
    [key: string]: any;
}) => Readonly<TFields>;
export declare const transformFieldsToDatabaseObject: <TFields extends Record<string, any>>(entityConfiguration: EntityConfiguration<TFields>, fieldTransformerMap: FieldTransformerMap, fields: Readonly<Partial<TFields>>) => object;
export declare const transformCacheObjectToFields: <TFields extends Record<string, any>>(entityConfiguration: EntityConfiguration<TFields>, fieldTransformerMap: FieldTransformerMap, cacheObject: {
    [key: string]: any;
}) => Readonly<TFields>;
export declare const transformFieldsToCacheObject: <TFields extends Record<string, any>>(entityConfiguration: EntityConfiguration<TFields>, fieldTransformerMap: FieldTransformerMap, fields: Readonly<Partial<TFields>>) => object;
