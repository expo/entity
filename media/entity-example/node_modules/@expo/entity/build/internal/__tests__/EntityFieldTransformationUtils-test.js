"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const EntityConfiguration_1 = __importDefault(require("../../EntityConfiguration"));
const EntityFields_1 = require("../../EntityFields");
const EntityFieldTransformationUtils_1 = require("../EntityFieldTransformationUtils");
const blahEntityConfiguration = new EntityConfiguration_1.default({
    idField: 'id',
    tableName: 'blah_table',
    schema: {
        id: new EntityFields_1.UUIDField({
            columnName: 'id',
        }),
        cacheable: new EntityFields_1.StringField({
            columnName: 'cacheable',
            cache: true,
        }),
        uniqueButNotCacheable: new EntityFields_1.StringField({
            columnName: 'unique_but_not_cacheable',
        }),
        transformRead: new EntityFields_1.StringField({
            columnName: 'transform_read',
        }),
        transformWrite: new EntityFields_1.StringField({
            columnName: 'transform_write',
        }),
    },
    databaseAdapterFlavor: 'postgres',
    cacheAdapterFlavor: 'redis',
});
describe(EntityFieldTransformationUtils_1.getDatabaseFieldForEntityField, () => {
    it('returns correct mapping', () => {
        expect((0, EntityFieldTransformationUtils_1.getDatabaseFieldForEntityField)(blahEntityConfiguration, 'cacheable')).toEqual('cacheable');
        expect((0, EntityFieldTransformationUtils_1.getDatabaseFieldForEntityField)(blahEntityConfiguration, 'uniqueButNotCacheable')).toEqual('unique_but_not_cacheable');
    });
});
describe(EntityFieldTransformationUtils_1.transformDatabaseObjectToFields, () => {
    it('leaves out unknown fields', () => {
        expect((0, EntityFieldTransformationUtils_1.transformDatabaseObjectToFields)(blahEntityConfiguration, new Map(), {
            id: 'blah',
            unique_but_not_cacheable: 'wat',
            who: 'why',
        })).toEqual({
            id: 'blah',
            uniqueButNotCacheable: 'wat',
        });
    });
    it('does field read transformation', () => {
        const fieldTransformMap = new Map([
            [
                EntityFields_1.StringField.name,
                {
                    read: (val) => `${val}-read-transformed`,
                },
            ],
        ]);
        expect((0, EntityFieldTransformationUtils_1.transformDatabaseObjectToFields)(blahEntityConfiguration, fieldTransformMap, {
            transform_read: 'wat',
        })).toEqual({
            transformRead: 'wat-read-transformed',
        });
    });
});
describe(EntityFieldTransformationUtils_1.transformFieldsToDatabaseObject, () => {
    it('transforms fields', () => {
        expect((0, EntityFieldTransformationUtils_1.transformFieldsToDatabaseObject)(blahEntityConfiguration, new Map(), {
            id: 'blah',
            cacheable: 'wat',
            uniqueButNotCacheable: 'wat',
        })).toEqual({
            id: 'blah',
            cacheable: 'wat',
            unique_but_not_cacheable: 'wat',
        });
    });
    it('does field write transformation', () => {
        const fieldTransformMap = new Map([
            [
                EntityFields_1.StringField.name,
                {
                    write: (val) => `${val}-write-transformed`,
                },
            ],
        ]);
        expect((0, EntityFieldTransformationUtils_1.transformFieldsToDatabaseObject)(blahEntityConfiguration, fieldTransformMap, {
            transformWrite: 'wat',
        })).toEqual({
            transform_write: 'wat-write-transformed',
        });
    });
});
describe(EntityFieldTransformationUtils_1.transformCacheObjectToFields, () => {
    it('does field read transformation, keeping unknown fields for cache version inconsistencies', () => {
        const fieldTransformMap = new Map([
            [
                EntityFields_1.StringField.name,
                {
                    read: (val) => `${val}-read-transformed-cache`,
                },
            ],
        ]);
        expect((0, EntityFieldTransformationUtils_1.transformCacheObjectToFields)(blahEntityConfiguration, fieldTransformMap, {
            id: 'hello',
            transformRead: 'wat',
            unknownField: 'who',
        })).toEqual({
            id: 'hello',
            transformRead: 'wat-read-transformed-cache',
            unknownField: 'who',
        });
    });
});
describe(EntityFieldTransformationUtils_1.transformFieldsToCacheObject, () => {
    it('does field write transformation, keeping unknown fields at runtime for cache version inconsistencies', () => {
        const fieldTransformMap = new Map([
            [
                EntityFields_1.StringField.name,
                {
                    write: (val) => `${val}-write-transformed-cache`,
                },
            ],
        ]);
        expect((0, EntityFieldTransformationUtils_1.transformFieldsToCacheObject)(blahEntityConfiguration, fieldTransformMap, {
            id: 'hello',
            transformWrite: 'wat',
            unknownField: 'who',
        })).toEqual({
            id: 'hello',
            transformWrite: 'wat-write-transformed-cache',
            unknownField: 'who',
        });
    });
});
//# sourceMappingURL=EntityFieldTransformationUtils-test.js.map