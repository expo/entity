"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ts_mockito_1 = require("ts-mockito");
const EntityConfiguration_1 = __importDefault(require("../../EntityConfiguration"));
const EntityFields_1 = require("../../EntityFields");
const ReadThroughEntityCache_1 = __importStar(require("../ReadThroughEntityCache"));
const makeEntityConfiguration = (cacheIdField) => new EntityConfiguration_1.default({
    idField: 'id',
    tableName: 'blah',
    schema: {
        id: new EntityFields_1.UUIDField({ columnName: 'id', cache: cacheIdField }),
    },
    databaseAdapterFlavor: 'postgres',
    cacheAdapterFlavor: 'redis',
});
const createIdFetcher = (ids) => async (fetcherFieldValues) => {
    const results = new Map();
    fetcherFieldValues.forEach((v) => {
        if (ids.includes(v)) {
            results.set(v, [{ id: v }]);
        }
        else {
            results.set(v, []);
        }
    });
    return results;
};
const createFetcherNonUnique = (ids) => async (fetcherFieldValues) => {
    const results = new Map();
    fetcherFieldValues.forEach((v) => {
        if (ids.includes(v)) {
            results.set(v, [{ id: v }, { id: v + '2' }]);
        }
        else {
            results.set(v, []);
        }
    });
    return results;
};
describe(ReadThroughEntityCache_1.default, () => {
    describe('readManyThroughAsync', () => {
        it('fetches from DB upon cache miss and caches the result', async () => {
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(true), cacheAdapter);
            const fetcher = createIdFetcher(['wat', 'who']);
            (0, ts_mockito_1.when)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who']))).thenResolve(new Map([
                ['wat', { status: ReadThroughEntityCache_1.CacheStatus.MISS }],
                ['who', { status: ReadThroughEntityCache_1.CacheStatus.MISS }],
            ]));
            const result = await entityCache.readManyThroughAsync('id', ['wat', 'who'], fetcher);
            (0, ts_mockito_1.verify)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who']))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheManyAsync('id', (0, ts_mockito_1.deepEqual)(new Map([
                ['wat', { id: 'wat' }],
                ['who', { id: 'who' }],
            ])))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheDBMissesAsync('id', (0, ts_mockito_1.deepEqual)([]))).once();
            expect(result).toEqual(new Map([
                ['wat', [{ id: 'wat' }]],
                ['who', [{ id: 'who' }]],
            ]));
        });
        it('does not fetch from the DB or cache results when all cache fetches are hits', async () => {
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(true), cacheAdapter);
            const fetcher = createIdFetcher(['wat', 'who']);
            (0, ts_mockito_1.when)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who']))).thenResolve(new Map([
                ['wat', { status: ReadThroughEntityCache_1.CacheStatus.HIT, item: { id: 'wat' } }],
                ['who', { status: ReadThroughEntityCache_1.CacheStatus.HIT, item: { id: 'who' } }],
            ]));
            const result = await entityCache.readManyThroughAsync('id', ['wat', 'who'], fetcher);
            (0, ts_mockito_1.verify)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who']))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheManyAsync('id', (0, ts_mockito_1.deepEqual)(new Map([
                ['wat', { id: 'wat' }],
                ['who', { id: 'who' }],
            ])))).never();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheDBMissesAsync('id', (0, ts_mockito_1.deepEqual)([]))).never();
            expect(result).toEqual(new Map([
                ['wat', [{ id: 'wat' }]],
                ['who', [{ id: 'who' }]],
            ]));
        });
        it('negatively caches db misses', async () => {
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(true), cacheAdapter);
            // simulate db miss
            const fetcher = createIdFetcher(['wat', 'who']);
            (0, ts_mockito_1.when)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['why']))).thenResolve(new Map([['why', { status: ReadThroughEntityCache_1.CacheStatus.MISS }]]));
            const result = await entityCache.readManyThroughAsync('id', ['why'], fetcher);
            (0, ts_mockito_1.verify)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['why']))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheManyAsync('id', (0, ts_mockito_1.deepEqual)(new Map()))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheDBMissesAsync('id', (0, ts_mockito_1.deepEqual)(['why']))).once();
            expect(result).toEqual(new Map());
        });
        it('does not return or fetch negatively cached results from DB', async () => {
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(true), cacheAdapter);
            const fetcher = createIdFetcher([]);
            (0, ts_mockito_1.when)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['why']))).thenResolve(new Map([['why', { status: ReadThroughEntityCache_1.CacheStatus.NEGATIVE }]]));
            const result = await entityCache.readManyThroughAsync('id', ['why'], fetcher);
            (0, ts_mockito_1.verify)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['why']))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheManyAsync('id', (0, ts_mockito_1.anything)())).never();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheDBMissesAsync('id', (0, ts_mockito_1.anything)())).never();
            expect(result).toEqual(new Map());
        });
        it('does a mix and match of hit, miss, and negative', async () => {
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(true), cacheAdapter);
            const fetcher = createIdFetcher(['wat', 'who', 'why']);
            (0, ts_mockito_1.when)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who', 'why', 'how']))).thenResolve(new Map([
                ['wat', { status: ReadThroughEntityCache_1.CacheStatus.MISS }],
                ['who', { status: ReadThroughEntityCache_1.CacheStatus.NEGATIVE }],
                ['why', { status: ReadThroughEntityCache_1.CacheStatus.HIT, item: { id: 'why' } }],
                ['how', { status: ReadThroughEntityCache_1.CacheStatus.MISS }],
            ]));
            const result = await entityCache.readManyThroughAsync('id', ['wat', 'who', 'why', 'how'], fetcher);
            (0, ts_mockito_1.verify)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who', 'why', 'how']))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheManyAsync('id', (0, ts_mockito_1.deepEqual)(new Map([['wat', { id: 'wat' }]])))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheDBMissesAsync('id', (0, ts_mockito_1.deepEqual)(['how']))).once();
            expect(result).toEqual(new Map([
                ['wat', [{ id: 'wat' }]],
                ['why', [{ id: 'why' }]],
            ]));
        });
        it('does not call into cache for field that is not cacheable', async () => {
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(false), cacheAdapter);
            const fetcher = createIdFetcher(['wat']);
            const result = await entityCache.readManyThroughAsync('id', ['wat'], fetcher);
            (0, ts_mockito_1.verify)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.anything)())).never();
            expect(result).toEqual(new Map([['wat', [{ id: 'wat' }]]]));
        });
        it('does not cache when DB returns multiple objects for what is supposed to be unique and returns empty', async () => {
            const consoleSpy = jest.spyOn(console, 'warn');
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(true), cacheAdapter);
            const fetcher = createFetcherNonUnique(['wat', 'who']);
            (0, ts_mockito_1.when)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who']))).thenResolve(new Map([
                ['wat', { status: ReadThroughEntityCache_1.CacheStatus.MISS }],
                ['who', { status: ReadThroughEntityCache_1.CacheStatus.MISS }],
            ]));
            const result = await entityCache.readManyThroughAsync('id', ['wat', 'who'], fetcher);
            (0, ts_mockito_1.verify)(cacheAdapterMock.loadManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat', 'who']))).once();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheManyAsync('id', (0, ts_mockito_1.deepEqual)(new Map([
                ['wat', { id: 'wat' }],
                ['who', { id: 'who' }],
            ])))).never();
            (0, ts_mockito_1.verify)(cacheAdapterMock.cacheDBMissesAsync('id', (0, ts_mockito_1.deepEqual)([]))).once();
            expect(result).toEqual(new Map());
            expect(consoleSpy).toHaveBeenCalledWith('unique key id in blah returned multiple rows for wat');
            expect(consoleSpy).toHaveBeenCalledWith('unique key id in blah returned multiple rows for who');
        });
    });
    describe('invalidateManyAsync', () => {
        it('calls cache adapter invalidate', async () => {
            const cacheAdapterMock = (0, ts_mockito_1.mock)();
            const cacheAdapter = (0, ts_mockito_1.instance)(cacheAdapterMock);
            const entityCache = new ReadThroughEntityCache_1.default(makeEntityConfiguration(true), cacheAdapter);
            await entityCache.invalidateManyAsync('id', ['wat']);
            (0, ts_mockito_1.verify)(cacheAdapterMock.invalidateManyAsync('id', (0, ts_mockito_1.deepEqual)(['wat']))).once();
        });
    });
});
//# sourceMappingURL=ReadThroughEntityCache-test.js.map