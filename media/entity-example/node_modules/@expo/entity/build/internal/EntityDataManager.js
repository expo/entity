"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dataloader_1 = __importDefault(require("dataloader"));
const entityUtils_1 = require("../entityUtils");
const EntityMetricsUtils_1 = require("../metrics/EntityMetricsUtils");
const IEntityMetricsAdapter_1 = require("../metrics/IEntityMetricsAdapter");
const maps_1 = require("../utils/collections/maps");
/**
 * A data manager is responsible for orchestrating multiple sources of entity
 * data including local caches, EntityCacheAdapter, and EntityDatabaseAdapter.
 *
 * It is also responsible for invalidating all sources of data when mutated using EntityMutator.
 */
class EntityDataManager {
    databaseAdapter;
    entityCache;
    queryContextProvider;
    metricsAdapter;
    entityClassName;
    fieldDataLoaders = new Map();
    constructor(databaseAdapter, entityCache, queryContextProvider, metricsAdapter, entityClassName) {
        this.databaseAdapter = databaseAdapter;
        this.entityCache = entityCache;
        this.queryContextProvider = queryContextProvider;
        this.metricsAdapter = metricsAdapter;
        this.entityClassName = entityClassName;
    }
    getFieldDataLoaderForFieldName(fieldName) {
        return (0, maps_1.computeIfAbsent)(this.fieldDataLoaders, fieldName, () => {
            return new dataloader_1.default(async (fieldValues) => {
                const objectMap = await this.loadManyForDataLoaderByFieldEqualingAsync(fieldName, fieldValues);
                return fieldValues.map((fv) => objectMap.get(fv) ?? []);
            });
        });
    }
    async loadManyForDataLoaderByFieldEqualingAsync(fieldName, fieldValues) {
        this.metricsAdapter.incrementDataManagerLoadCount({
            type: IEntityMetricsAdapter_1.IncrementLoadCountEventType.CACHE,
            fieldValueCount: fieldValues.length,
            entityClassName: this.entityClassName,
        });
        return await this.entityCache.readManyThroughAsync(fieldName, fieldValues, async (fetcherValues) => {
            this.metricsAdapter.incrementDataManagerLoadCount({
                type: IEntityMetricsAdapter_1.IncrementLoadCountEventType.DATABASE,
                fieldValueCount: fieldValues.length,
                entityClassName: this.entityClassName,
            });
            return await this.databaseAdapter.fetchManyWhereAsync(this.queryContextProvider.getQueryContext(), fieldName, fetcherValues);
        });
    }
    /**
     * Load many objects where fieldName is one of fieldValues.
     *
     * @param queryContext - query context in which to perform the load
     * @param fieldName - object field being queried
     * @param fieldValues - fieldName field values being queried
     * @returns map from fieldValue to objects that match the query for that fieldValue
     */
    async loadManyByFieldEqualingAsync(queryContext, fieldName, fieldValues) {
        return await (0, EntityMetricsUtils_1.timeAndLogLoadMapEventAsync)(this.metricsAdapter, IEntityMetricsAdapter_1.EntityMetricsLoadType.LOAD_MANY, this.entityClassName)(this.loadManyByFieldEqualingInternalAsync(queryContext, fieldName, fieldValues));
    }
    async loadManyByFieldEqualingInternalAsync(queryContext, fieldName, fieldValues) {
        const nullOrUndefinedValueIndex = fieldValues.findIndex((value) => value === null || value === undefined);
        if (nullOrUndefinedValueIndex >= 0) {
            throw new Error(`Invalid load: ${this.entityClassName} (${String(fieldName)} = ${fieldValues[nullOrUndefinedValueIndex]})`);
        }
        // don't cache when in transaction, as rollbacks complicate things significantly
        if (queryContext.isInTransaction()) {
            return await this.databaseAdapter.fetchManyWhereAsync(queryContext, fieldName, fieldValues);
        }
        this.metricsAdapter.incrementDataManagerLoadCount({
            type: IEntityMetricsAdapter_1.IncrementLoadCountEventType.DATALOADER,
            fieldValueCount: fieldValues.length,
            entityClassName: this.entityClassName,
        });
        const dataLoader = this.getFieldDataLoaderForFieldName(fieldName);
        const results = await dataLoader.loadMany(fieldValues);
        const [values, errors] = (0, entityUtils_1.partitionErrors)(results);
        if (errors.length > 0) {
            const error = errors[0];
            throw error;
        }
        return (0, maps_1.zipToMap)(fieldValues, values);
    }
    /**
     * Loads many objects matching the conjunction of where clauses constructed from
     * specified field equality operands.
     *
     * @param queryContext - query context in which to perform the load
     * @param fieldEqualityOperands - list of field equality where clause operand specifications
     * @param querySelectionModifiers - limit, offset, and orderBy for the query
     * @returns array of objects matching the query
     */
    async loadManyByFieldEqualityConjunctionAsync(queryContext, fieldEqualityOperands, querySelectionModifiers) {
        return await (0, EntityMetricsUtils_1.timeAndLogLoadEventAsync)(this.metricsAdapter, IEntityMetricsAdapter_1.EntityMetricsLoadType.LOAD_MANY_EQUALITY_CONJUNCTION, this.entityClassName)(this.databaseAdapter.fetchManyByFieldEqualityConjunctionAsync(queryContext, fieldEqualityOperands, querySelectionModifiers));
    }
    /**
     * Loads many objects matching the raw WHERE clause.
     *
     * @param queryContext - query context in which to perform the load
     * @param rawWhereClause - parameterized SQL WHERE clause with positional binding placeholders or named binding placeholders
     * @param bindings - array of positional bindings or object of named bindings
     * @param querySelectionModifiers - limit, offset, orderBy, and orderByRaw for the query
     * @returns array of objects matching the query
     */
    async loadManyByRawWhereClauseAsync(queryContext, rawWhereClause, bindings, querySelectionModifiers) {
        return await (0, EntityMetricsUtils_1.timeAndLogLoadEventAsync)(this.metricsAdapter, IEntityMetricsAdapter_1.EntityMetricsLoadType.LOAD_MANY_RAW, this.entityClassName)(this.databaseAdapter.fetchManyByRawWhereClauseAsync(queryContext, rawWhereClause, bindings, querySelectionModifiers));
    }
    async invalidateManyByFieldEqualingAsync(fieldName, fieldValues) {
        await this.entityCache.invalidateManyAsync(fieldName, fieldValues);
        const dataLoader = this.getFieldDataLoaderForFieldName(fieldName);
        fieldValues.forEach((fieldValue) => dataLoader.clear(fieldValue));
    }
    /**
     * Invalidate all caches, in-memory or otherwise, for an object.
     *
     * @param objectFields - object to invalidate from all applicable caches
     */
    async invalidateObjectFieldsAsync(objectFields) {
        // TODO(wschurman): check for races with load
        const keys = Object.keys(objectFields);
        await Promise.all(keys.map(async (fieldName) => {
            const value = objectFields[fieldName];
            if (value !== undefined) {
                await this.invalidateManyByFieldEqualingAsync(fieldName, [
                    value,
                ]);
            }
        }));
    }
}
exports.default = EntityDataManager;
//# sourceMappingURL=EntityDataManager.js.map