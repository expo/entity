import EntityDataManager from './EntityDataManager';
import EntityConfiguration from '../EntityConfiguration';
import EntityDatabaseAdapter from '../EntityDatabaseAdapter';
import EntityQueryContextProvider from '../EntityQueryContextProvider';
import IEntityCacheAdapter from '../IEntityCacheAdapter';
import IEntityCacheAdapterProvider from '../IEntityCacheAdapterProvider';
import IEntityDatabaseAdapterProvider from '../IEntityDatabaseAdapterProvider';
import IEntityMetricsAdapter from '../metrics/IEntityMetricsAdapter';
/**
 * Responsible for orchestrating fetching and caching of entity data from a
 * table. Note that one instance is shared amongst all entities that read from
 * the table to ensure cross-entity data consistency.
 */
export default class EntityTableDataCoordinator<TFields extends Record<string, any>> {
    readonly entityConfiguration: EntityConfiguration<TFields>;
    private readonly queryContextProvider;
    readonly databaseAdapter: EntityDatabaseAdapter<TFields>;
    readonly cacheAdapter: IEntityCacheAdapter<TFields>;
    readonly dataManager: EntityDataManager<TFields>;
    constructor(entityConfiguration: EntityConfiguration<TFields>, databaseAdapterProvider: IEntityDatabaseAdapterProvider, cacheAdapterProvider: IEntityCacheAdapterProvider, queryContextProvider: EntityQueryContextProvider, metricsAdapter: IEntityMetricsAdapter, entityClassName: string);
    getQueryContextProvider(): EntityQueryContextProvider;
}
